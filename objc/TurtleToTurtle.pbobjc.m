// Copyright (c) 2018, The TurtleCoin Developers
// 
// Please see the included LICENSE file for more information.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TurtleToTurtle.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "TurtleToTurtle.pbobjc.h"
#import "TurtleCoin.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - TurtleToTurtleRoot

@implementation TurtleToTurtleRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TurtleToTurtleRoot_FileDescriptor

static GPBFileDescriptor *TurtleToTurtleRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"TurtleToTurtle"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - T2TDatagram

@implementation T2TDatagram

@dynamic dataPayloadOneOfCase;
@dynamic p2PNetworkId;
@dynamic version;
@dynamic peerId;
@dynamic t2TCandidateList;
@dynamic t2TCandidateListRequest;
@dynamic blockChainPayload;

typedef struct T2TDatagram__storage_ {
  uint32_t _has_storage_[2];
  uint32_t p2PNetworkId;
  uint32_t version;
  NSString *peerId;
  T2TCandidateList *t2TCandidateList;
  T2TCandidateListRequest *t2TCandidateListRequest;
  BlockChainPayload *blockChainPayload;
} T2TDatagram__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "p2PNetworkId",
        .dataTypeSpecific.className = NULL,
        .number = T2TDatagram_FieldNumber_P2PNetworkId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(T2TDatagram__storage_, p2PNetworkId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = T2TDatagram_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(T2TDatagram__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "peerId",
        .dataTypeSpecific.className = NULL,
        .number = T2TDatagram_FieldNumber_PeerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(T2TDatagram__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "t2TCandidateList",
        .dataTypeSpecific.className = GPBStringifySymbol(T2TCandidateList),
        .number = T2TDatagram_FieldNumber_T2TCandidateList,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(T2TDatagram__storage_, t2TCandidateList),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "t2TCandidateListRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(T2TCandidateListRequest),
        .number = T2TDatagram_FieldNumber_T2TCandidateListRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(T2TDatagram__storage_, t2TCandidateListRequest),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blockChainPayload",
        .dataTypeSpecific.className = GPBStringifySymbol(BlockChainPayload),
        .number = T2TDatagram_FieldNumber_BlockChainPayload,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(T2TDatagram__storage_, blockChainPayload),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[T2TDatagram class]
                                     rootClass:[TurtleToTurtleRoot class]
                                          file:TurtleToTurtleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(T2TDatagram__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "dataPayload",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\002*\000\003\006\000\004\002.\000\005\0025\000\006\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void T2TDatagram_ClearDataPayloadOneOfCase(T2TDatagram *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - T2TCandidateList

@implementation T2TCandidateList

@dynamic candidateArray, candidateArray_Count;

typedef struct T2TCandidateList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *candidateArray;
} T2TCandidateList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "candidateArray",
        .dataTypeSpecific.className = GPBStringifySymbol(T2TCandidate),
        .number = T2TCandidateList_FieldNumber_CandidateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(T2TCandidateList__storage_, candidateArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[T2TCandidateList class]
                                     rootClass:[TurtleToTurtleRoot class]
                                          file:TurtleToTurtleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(T2TCandidateList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - T2TCandidateListRequest

@implementation T2TCandidateListRequest

@dynamic blockChainIdArray, blockChainIdArray_Count;

typedef struct T2TCandidateListRequest__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32Array *blockChainIdArray;
} T2TCandidateListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockChainIdArray",
        .dataTypeSpecific.className = NULL,
        .number = T2TCandidateListRequest_FieldNumber_BlockChainIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(T2TCandidateListRequest__storage_, blockChainIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[T2TCandidateListRequest class]
                                     rootClass:[TurtleToTurtleRoot class]
                                          file:TurtleToTurtleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(T2TCandidateListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000blockChainId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - T2TCandidate

@implementation T2TCandidate

@dynamic peerId;
@dynamic version;
@dynamic ipV4Address;
@dynamic ipV6Address;
@dynamic port;
@dynamic ttl;
@dynamic hasCapability, capability;

typedef struct T2TCandidate__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  uint32_t ipV4Address;
  uint32_t port;
  uint32_t ttl;
  NSString *peerId;
  NSString *ipV6Address;
  T2TNodeCapability *capability;
} T2TCandidate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peerId",
        .dataTypeSpecific.className = NULL,
        .number = T2TCandidate_FieldNumber_PeerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(T2TCandidate__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = T2TCandidate_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(T2TCandidate__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ipV4Address",
        .dataTypeSpecific.className = NULL,
        .number = T2TCandidate_FieldNumber_IpV4Address,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(T2TCandidate__storage_, ipV4Address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ipV6Address",
        .dataTypeSpecific.className = NULL,
        .number = T2TCandidate_FieldNumber_IpV6Address,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(T2TCandidate__storage_, ipV6Address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = T2TCandidate_FieldNumber_Port,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(T2TCandidate__storage_, port),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ttl",
        .dataTypeSpecific.className = NULL,
        .number = T2TCandidate_FieldNumber_Ttl,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(T2TCandidate__storage_, ttl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "capability",
        .dataTypeSpecific.className = GPBStringifySymbol(T2TNodeCapability),
        .number = T2TCandidate_FieldNumber_Capability,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(T2TCandidate__storage_, capability),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[T2TCandidate class]
                                     rootClass:[TurtleToTurtleRoot class]
                                          file:TurtleToTurtleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(T2TCandidate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\000\003\013\000\004\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - T2TNodeCapability

@implementation T2TNodeCapability

@dynamic archival;
@dynamic blockChainIdArray, blockChainIdArray_Count;

typedef struct T2TNodeCapability__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32Array *blockChainIdArray;
} T2TNodeCapability__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "archival",
        .dataTypeSpecific.className = NULL,
        .number = T2TNodeCapability_FieldNumber_Archival,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "blockChainIdArray",
        .dataTypeSpecific.className = NULL,
        .number = T2TNodeCapability_FieldNumber_BlockChainIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(T2TNodeCapability__storage_, blockChainIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[T2TNodeCapability class]
                                     rootClass:[TurtleToTurtleRoot class]
                                          file:TurtleToTurtleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(T2TNodeCapability__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000blockChainId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BlockChainPayload

@implementation BlockChainPayload

@dynamic dataOneOfCase;
@dynamic block;
@dynamic transaction;

typedef struct BlockChainPayload__storage_ {
  uint32_t _has_storage_[2];
  TurtleBlock *block;
  TurtleTransaction *transaction;
} BlockChainPayload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = GPBStringifySymbol(TurtleBlock),
        .number = BlockChainPayload_FieldNumber_Block,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(BlockChainPayload__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transaction",
        .dataTypeSpecific.className = GPBStringifySymbol(TurtleTransaction),
        .number = BlockChainPayload_FieldNumber_Transaction,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(BlockChainPayload__storage_, transaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockChainPayload class]
                                     rootClass:[TurtleToTurtleRoot class]
                                          file:TurtleToTurtleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockChainPayload__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "data",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void BlockChainPayload_ClearDataOneOfCase(BlockChainPayload *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
