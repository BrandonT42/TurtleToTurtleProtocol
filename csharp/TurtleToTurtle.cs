// Copyright (c) 2018, The TurtleCoin Developers
// 
// Please see the included LICENSE file for more information.

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TurtleToTurtle.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TurtleToTurtle {

  /// <summary>Holder for reflection information generated from TurtleToTurtle.proto</summary>
  public static partial class TurtleToTurtleReflection {

    #region Descriptor
    /// <summary>File descriptor for TurtleToTurtle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TurtleToTurtleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRUdXJ0bGVUb1R1cnRsZS5wcm90bxIOVHVydGxlVG9UdXJ0bGUaEFR1cnRs",
            "ZUNvaW4ucHJvdG8inQIKC1QyVERhdGFncmFtEhQKDHAycE5ldHdvcmtJZBgB",
            "IAEoDRIPCgd2ZXJzaW9uGAIgASgNEg4KBnBlZXJJZBgDIAEoCRI8ChB0MnRD",
            "YW5kaWRhdGVMaXN0GAQgASgLMiAuVHVydGxlVG9UdXJ0bGUuVDJUQ2FuZGlk",
            "YXRlTGlzdEgAEkoKF3QydENhbmRpZGF0ZUxpc3RSZXF1ZXN0GAUgASgLMicu",
            "VHVydGxlVG9UdXJ0bGUuVDJUQ2FuZGlkYXRlTGlzdFJlcXVlc3RIABI+ChFi",
            "bG9ja0NoYWluUGF5bG9hZBgGIAEoCzIhLlR1cnRsZVRvVHVydGxlLkJsb2Nr",
            "Q2hhaW5QYXlsb2FkSABCDQoLZGF0YVBheWxvYWQiQwoQVDJUQ2FuZGlkYXRl",
            "TGlzdBIvCgljYW5kaWRhdGUYASADKAsyHC5UdXJ0bGVUb1R1cnRsZS5UMlRD",
            "YW5kaWRhdGUiLwoXVDJUQ2FuZGlkYXRlTGlzdFJlcXVlc3QSFAoMYmxvY2tD",
            "aGFpbklkGAEgAygNIqsBCgxUMlRDYW5kaWRhdGUSDgoGcGVlcklkGAEgASgJ",
            "Eg8KB3ZlcnNpb24YAiABKA0SEwoLaXBWNEFkZHJlc3MYAyABKA0SEwoLaXBW",
            "NkFkZHJlc3MYBCABKAkSDAoEcG9ydBgFIAEoDRILCgN0dGwYBiABKA0SNQoK",
            "Y2FwYWJpbGl0eRgHIAEoCzIhLlR1cnRsZVRvVHVydGxlLlQyVE5vZGVDYXBh",
            "YmlsaXR5IjsKEVQyVE5vZGVDYXBhYmlsaXR5EhAKCGFyY2hpdmFsGAEgASgI",
            "EhQKDGJsb2NrQ2hhaW5JZBgCIAMoDSKZAQoRQmxvY2tDaGFpblBheWxvYWQS",
            "NwoFYmxvY2sYASABKAsyJi5UdXJ0bGVUb1R1cnRsZS5UdXJ0bGVDb2luLlR1",
            "cnRsZUJsb2NrSAASQwoLdHJhbnNhY3Rpb24YAiABKAsyLC5UdXJ0bGVUb1R1",
            "cnRsZS5UdXJ0bGVDb2luLlR1cnRsZVRyYW5zYWN0aW9uSABCBgoEZGF0YWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.T2TDatagram), global::TurtleToTurtle.T2TDatagram.Parser, new[]{ "P2PNetworkId", "Version", "PeerId", "T2TCandidateList", "T2TCandidateListRequest", "BlockChainPayload" }, new[]{ "DataPayload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.T2TCandidateList), global::TurtleToTurtle.T2TCandidateList.Parser, new[]{ "Candidate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.T2TCandidateListRequest), global::TurtleToTurtle.T2TCandidateListRequest.Parser, new[]{ "BlockChainId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.T2TCandidate), global::TurtleToTurtle.T2TCandidate.Parser, new[]{ "PeerId", "Version", "IpV4Address", "IpV6Address", "Port", "Ttl", "Capability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.T2TNodeCapability), global::TurtleToTurtle.T2TNodeCapability.Parser, new[]{ "Archival", "BlockChainId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.BlockChainPayload), global::TurtleToTurtle.BlockChainPayload.Parser, new[]{ "Block", "Transaction" }, new[]{ "Data" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class T2TDatagram : pb::IMessage<T2TDatagram> {
    private static readonly pb::MessageParser<T2TDatagram> _parser = new pb::MessageParser<T2TDatagram>(() => new T2TDatagram());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<T2TDatagram> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TurtleToTurtle.TurtleToTurtleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TDatagram() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TDatagram(T2TDatagram other) : this() {
      p2PNetworkId_ = other.p2PNetworkId_;
      version_ = other.version_;
      peerId_ = other.peerId_;
      switch (other.DataPayloadCase) {
        case DataPayloadOneofCase.T2TCandidateList:
          T2TCandidateList = other.T2TCandidateList.Clone();
          break;
        case DataPayloadOneofCase.T2TCandidateListRequest:
          T2TCandidateListRequest = other.T2TCandidateListRequest.Clone();
          break;
        case DataPayloadOneofCase.BlockChainPayload:
          BlockChainPayload = other.BlockChainPayload.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TDatagram Clone() {
      return new T2TDatagram(this);
    }

    /// <summary>Field number for the "p2pNetworkId" field.</summary>
    public const int P2PNetworkIdFieldNumber = 1;
    private uint p2PNetworkId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint P2PNetworkId {
      get { return p2PNetworkId_; }
      set {
        p2PNetworkId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "peerId" field.</summary>
    public const int PeerIdFieldNumber = 3;
    private string peerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PeerId {
      get { return peerId_; }
      set {
        peerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "t2tCandidateList" field.</summary>
    public const int T2TCandidateListFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TurtleToTurtle.T2TCandidateList T2TCandidateList {
      get { return dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateList ? (global::TurtleToTurtle.T2TCandidateList) dataPayload_ : null; }
      set {
        dataPayload_ = value;
        dataPayloadCase_ = value == null ? DataPayloadOneofCase.None : DataPayloadOneofCase.T2TCandidateList;
      }
    }

    /// <summary>Field number for the "t2tCandidateListRequest" field.</summary>
    public const int T2TCandidateListRequestFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TurtleToTurtle.T2TCandidateListRequest T2TCandidateListRequest {
      get { return dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateListRequest ? (global::TurtleToTurtle.T2TCandidateListRequest) dataPayload_ : null; }
      set {
        dataPayload_ = value;
        dataPayloadCase_ = value == null ? DataPayloadOneofCase.None : DataPayloadOneofCase.T2TCandidateListRequest;
      }
    }

    /// <summary>Field number for the "blockChainPayload" field.</summary>
    public const int BlockChainPayloadFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TurtleToTurtle.BlockChainPayload BlockChainPayload {
      get { return dataPayloadCase_ == DataPayloadOneofCase.BlockChainPayload ? (global::TurtleToTurtle.BlockChainPayload) dataPayload_ : null; }
      set {
        dataPayload_ = value;
        dataPayloadCase_ = value == null ? DataPayloadOneofCase.None : DataPayloadOneofCase.BlockChainPayload;
      }
    }

    private object dataPayload_;
    /// <summary>Enum of possible cases for the "dataPayload" oneof.</summary>
    public enum DataPayloadOneofCase {
      None = 0,
      T2TCandidateList = 4,
      T2TCandidateListRequest = 5,
      BlockChainPayload = 6,
    }
    private DataPayloadOneofCase dataPayloadCase_ = DataPayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPayloadOneofCase DataPayloadCase {
      get { return dataPayloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataPayload() {
      dataPayloadCase_ = DataPayloadOneofCase.None;
      dataPayload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as T2TDatagram);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(T2TDatagram other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (P2PNetworkId != other.P2PNetworkId) return false;
      if (Version != other.Version) return false;
      if (PeerId != other.PeerId) return false;
      if (!object.Equals(T2TCandidateList, other.T2TCandidateList)) return false;
      if (!object.Equals(T2TCandidateListRequest, other.T2TCandidateListRequest)) return false;
      if (!object.Equals(BlockChainPayload, other.BlockChainPayload)) return false;
      if (DataPayloadCase != other.DataPayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (P2PNetworkId != 0) hash ^= P2PNetworkId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (PeerId.Length != 0) hash ^= PeerId.GetHashCode();
      if (dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateList) hash ^= T2TCandidateList.GetHashCode();
      if (dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateListRequest) hash ^= T2TCandidateListRequest.GetHashCode();
      if (dataPayloadCase_ == DataPayloadOneofCase.BlockChainPayload) hash ^= BlockChainPayload.GetHashCode();
      hash ^= (int) dataPayloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (P2PNetworkId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(P2PNetworkId);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (PeerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PeerId);
      }
      if (dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateList) {
        output.WriteRawTag(34);
        output.WriteMessage(T2TCandidateList);
      }
      if (dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateListRequest) {
        output.WriteRawTag(42);
        output.WriteMessage(T2TCandidateListRequest);
      }
      if (dataPayloadCase_ == DataPayloadOneofCase.BlockChainPayload) {
        output.WriteRawTag(50);
        output.WriteMessage(BlockChainPayload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (P2PNetworkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(P2PNetworkId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (PeerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PeerId);
      }
      if (dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(T2TCandidateList);
      }
      if (dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateListRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(T2TCandidateListRequest);
      }
      if (dataPayloadCase_ == DataPayloadOneofCase.BlockChainPayload) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockChainPayload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(T2TDatagram other) {
      if (other == null) {
        return;
      }
      if (other.P2PNetworkId != 0) {
        P2PNetworkId = other.P2PNetworkId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.PeerId.Length != 0) {
        PeerId = other.PeerId;
      }
      switch (other.DataPayloadCase) {
        case DataPayloadOneofCase.T2TCandidateList:
          if (T2TCandidateList == null) {
            T2TCandidateList = new global::TurtleToTurtle.T2TCandidateList();
          }
          T2TCandidateList.MergeFrom(other.T2TCandidateList);
          break;
        case DataPayloadOneofCase.T2TCandidateListRequest:
          if (T2TCandidateListRequest == null) {
            T2TCandidateListRequest = new global::TurtleToTurtle.T2TCandidateListRequest();
          }
          T2TCandidateListRequest.MergeFrom(other.T2TCandidateListRequest);
          break;
        case DataPayloadOneofCase.BlockChainPayload:
          if (BlockChainPayload == null) {
            BlockChainPayload = new global::TurtleToTurtle.BlockChainPayload();
          }
          BlockChainPayload.MergeFrom(other.BlockChainPayload);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            P2PNetworkId = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 26: {
            PeerId = input.ReadString();
            break;
          }
          case 34: {
            global::TurtleToTurtle.T2TCandidateList subBuilder = new global::TurtleToTurtle.T2TCandidateList();
            if (dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateList) {
              subBuilder.MergeFrom(T2TCandidateList);
            }
            input.ReadMessage(subBuilder);
            T2TCandidateList = subBuilder;
            break;
          }
          case 42: {
            global::TurtleToTurtle.T2TCandidateListRequest subBuilder = new global::TurtleToTurtle.T2TCandidateListRequest();
            if (dataPayloadCase_ == DataPayloadOneofCase.T2TCandidateListRequest) {
              subBuilder.MergeFrom(T2TCandidateListRequest);
            }
            input.ReadMessage(subBuilder);
            T2TCandidateListRequest = subBuilder;
            break;
          }
          case 50: {
            global::TurtleToTurtle.BlockChainPayload subBuilder = new global::TurtleToTurtle.BlockChainPayload();
            if (dataPayloadCase_ == DataPayloadOneofCase.BlockChainPayload) {
              subBuilder.MergeFrom(BlockChainPayload);
            }
            input.ReadMessage(subBuilder);
            BlockChainPayload = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class T2TCandidateList : pb::IMessage<T2TCandidateList> {
    private static readonly pb::MessageParser<T2TCandidateList> _parser = new pb::MessageParser<T2TCandidateList>(() => new T2TCandidateList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<T2TCandidateList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TurtleToTurtle.TurtleToTurtleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TCandidateList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TCandidateList(T2TCandidateList other) : this() {
      candidate_ = other.candidate_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TCandidateList Clone() {
      return new T2TCandidateList(this);
    }

    /// <summary>Field number for the "candidate" field.</summary>
    public const int CandidateFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TurtleToTurtle.T2TCandidate> _repeated_candidate_codec
        = pb::FieldCodec.ForMessage(10, global::TurtleToTurtle.T2TCandidate.Parser);
    private readonly pbc::RepeatedField<global::TurtleToTurtle.T2TCandidate> candidate_ = new pbc::RepeatedField<global::TurtleToTurtle.T2TCandidate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TurtleToTurtle.T2TCandidate> Candidate {
      get { return candidate_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as T2TCandidateList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(T2TCandidateList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!candidate_.Equals(other.candidate_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= candidate_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      candidate_.WriteTo(output, _repeated_candidate_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += candidate_.CalculateSize(_repeated_candidate_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(T2TCandidateList other) {
      if (other == null) {
        return;
      }
      candidate_.Add(other.candidate_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            candidate_.AddEntriesFrom(input, _repeated_candidate_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class T2TCandidateListRequest : pb::IMessage<T2TCandidateListRequest> {
    private static readonly pb::MessageParser<T2TCandidateListRequest> _parser = new pb::MessageParser<T2TCandidateListRequest>(() => new T2TCandidateListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<T2TCandidateListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TurtleToTurtle.TurtleToTurtleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TCandidateListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TCandidateListRequest(T2TCandidateListRequest other) : this() {
      blockChainId_ = other.blockChainId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TCandidateListRequest Clone() {
      return new T2TCandidateListRequest(this);
    }

    /// <summary>Field number for the "blockChainId" field.</summary>
    public const int BlockChainIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_blockChainId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> blockChainId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BlockChainId {
      get { return blockChainId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as T2TCandidateListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(T2TCandidateListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blockChainId_.Equals(other.blockChainId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blockChainId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blockChainId_.WriteTo(output, _repeated_blockChainId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blockChainId_.CalculateSize(_repeated_blockChainId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(T2TCandidateListRequest other) {
      if (other == null) {
        return;
      }
      blockChainId_.Add(other.blockChainId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            blockChainId_.AddEntriesFrom(input, _repeated_blockChainId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class T2TCandidate : pb::IMessage<T2TCandidate> {
    private static readonly pb::MessageParser<T2TCandidate> _parser = new pb::MessageParser<T2TCandidate>(() => new T2TCandidate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<T2TCandidate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TurtleToTurtle.TurtleToTurtleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TCandidate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TCandidate(T2TCandidate other) : this() {
      peerId_ = other.peerId_;
      version_ = other.version_;
      ipV4Address_ = other.ipV4Address_;
      ipV6Address_ = other.ipV6Address_;
      port_ = other.port_;
      ttl_ = other.ttl_;
      capability_ = other.capability_ != null ? other.capability_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TCandidate Clone() {
      return new T2TCandidate(this);
    }

    /// <summary>Field number for the "peerId" field.</summary>
    public const int PeerIdFieldNumber = 1;
    private string peerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PeerId {
      get { return peerId_; }
      set {
        peerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "ipV4Address" field.</summary>
    public const int IpV4AddressFieldNumber = 3;
    private uint ipV4Address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpV4Address {
      get { return ipV4Address_; }
      set {
        ipV4Address_ = value;
      }
    }

    /// <summary>Field number for the "ipV6Address" field.</summary>
    public const int IpV6AddressFieldNumber = 4;
    private string ipV6Address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpV6Address {
      get { return ipV6Address_; }
      set {
        ipV6Address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "ttl" field.</summary>
    public const int TtlFieldNumber = 6;
    private uint ttl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ttl {
      get { return ttl_; }
      set {
        ttl_ = value;
      }
    }

    /// <summary>Field number for the "capability" field.</summary>
    public const int CapabilityFieldNumber = 7;
    private global::TurtleToTurtle.T2TNodeCapability capability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TurtleToTurtle.T2TNodeCapability Capability {
      get { return capability_; }
      set {
        capability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as T2TCandidate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(T2TCandidate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PeerId != other.PeerId) return false;
      if (Version != other.Version) return false;
      if (IpV4Address != other.IpV4Address) return false;
      if (IpV6Address != other.IpV6Address) return false;
      if (Port != other.Port) return false;
      if (Ttl != other.Ttl) return false;
      if (!object.Equals(Capability, other.Capability)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PeerId.Length != 0) hash ^= PeerId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (IpV4Address != 0) hash ^= IpV4Address.GetHashCode();
      if (IpV6Address.Length != 0) hash ^= IpV6Address.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Ttl != 0) hash ^= Ttl.GetHashCode();
      if (capability_ != null) hash ^= Capability.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PeerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PeerId);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (IpV4Address != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IpV4Address);
      }
      if (IpV6Address.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IpV6Address);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Port);
      }
      if (Ttl != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Ttl);
      }
      if (capability_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Capability);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PeerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PeerId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (IpV4Address != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpV4Address);
      }
      if (IpV6Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpV6Address);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Ttl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ttl);
      }
      if (capability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Capability);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(T2TCandidate other) {
      if (other == null) {
        return;
      }
      if (other.PeerId.Length != 0) {
        PeerId = other.PeerId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.IpV4Address != 0) {
        IpV4Address = other.IpV4Address;
      }
      if (other.IpV6Address.Length != 0) {
        IpV6Address = other.IpV6Address;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Ttl != 0) {
        Ttl = other.Ttl;
      }
      if (other.capability_ != null) {
        if (capability_ == null) {
          capability_ = new global::TurtleToTurtle.T2TNodeCapability();
        }
        Capability.MergeFrom(other.Capability);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PeerId = input.ReadString();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 24: {
            IpV4Address = input.ReadUInt32();
            break;
          }
          case 34: {
            IpV6Address = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadUInt32();
            break;
          }
          case 48: {
            Ttl = input.ReadUInt32();
            break;
          }
          case 58: {
            if (capability_ == null) {
              capability_ = new global::TurtleToTurtle.T2TNodeCapability();
            }
            input.ReadMessage(capability_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class T2TNodeCapability : pb::IMessage<T2TNodeCapability> {
    private static readonly pb::MessageParser<T2TNodeCapability> _parser = new pb::MessageParser<T2TNodeCapability>(() => new T2TNodeCapability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<T2TNodeCapability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TurtleToTurtle.TurtleToTurtleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TNodeCapability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TNodeCapability(T2TNodeCapability other) : this() {
      archival_ = other.archival_;
      blockChainId_ = other.blockChainId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public T2TNodeCapability Clone() {
      return new T2TNodeCapability(this);
    }

    /// <summary>Field number for the "archival" field.</summary>
    public const int ArchivalFieldNumber = 1;
    private bool archival_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Archival {
      get { return archival_; }
      set {
        archival_ = value;
      }
    }

    /// <summary>Field number for the "blockChainId" field.</summary>
    public const int BlockChainIdFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_blockChainId_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> blockChainId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BlockChainId {
      get { return blockChainId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as T2TNodeCapability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(T2TNodeCapability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Archival != other.Archival) return false;
      if(!blockChainId_.Equals(other.blockChainId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Archival != false) hash ^= Archival.GetHashCode();
      hash ^= blockChainId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Archival != false) {
        output.WriteRawTag(8);
        output.WriteBool(Archival);
      }
      blockChainId_.WriteTo(output, _repeated_blockChainId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Archival != false) {
        size += 1 + 1;
      }
      size += blockChainId_.CalculateSize(_repeated_blockChainId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(T2TNodeCapability other) {
      if (other == null) {
        return;
      }
      if (other.Archival != false) {
        Archival = other.Archival;
      }
      blockChainId_.Add(other.blockChainId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Archival = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            blockChainId_.AddEntriesFrom(input, _repeated_blockChainId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockChainPayload : pb::IMessage<BlockChainPayload> {
    private static readonly pb::MessageParser<BlockChainPayload> _parser = new pb::MessageParser<BlockChainPayload>(() => new BlockChainPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockChainPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TurtleToTurtle.TurtleToTurtleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockChainPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockChainPayload(BlockChainPayload other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.Block:
          Block = other.Block.Clone();
          break;
        case DataOneofCase.Transaction:
          Transaction = other.Transaction.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockChainPayload Clone() {
      return new BlockChainPayload(this);
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TurtleToTurtle.TurtleCoin.TurtleBlock Block {
      get { return dataCase_ == DataOneofCase.Block ? (global::TurtleToTurtle.TurtleCoin.TurtleBlock) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Block;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TurtleToTurtle.TurtleCoin.TurtleTransaction Transaction {
      get { return dataCase_ == DataOneofCase.Transaction ? (global::TurtleToTurtle.TurtleCoin.TurtleTransaction) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Transaction;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Block = 1,
      Transaction = 2,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockChainPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockChainPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Block, other.Block)) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.Block) hash ^= Block.GetHashCode();
      if (dataCase_ == DataOneofCase.Transaction) hash ^= Transaction.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.Block) {
        output.WriteRawTag(10);
        output.WriteMessage(Block);
      }
      if (dataCase_ == DataOneofCase.Transaction) {
        output.WriteRawTag(18);
        output.WriteMessage(Transaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.Block) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (dataCase_ == DataOneofCase.Transaction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockChainPayload other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.Block:
          if (Block == null) {
            Block = new global::TurtleToTurtle.TurtleCoin.TurtleBlock();
          }
          Block.MergeFrom(other.Block);
          break;
        case DataOneofCase.Transaction:
          if (Transaction == null) {
            Transaction = new global::TurtleToTurtle.TurtleCoin.TurtleTransaction();
          }
          Transaction.MergeFrom(other.Transaction);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::TurtleToTurtle.TurtleCoin.TurtleBlock subBuilder = new global::TurtleToTurtle.TurtleCoin.TurtleBlock();
            if (dataCase_ == DataOneofCase.Block) {
              subBuilder.MergeFrom(Block);
            }
            input.ReadMessage(subBuilder);
            Block = subBuilder;
            break;
          }
          case 18: {
            global::TurtleToTurtle.TurtleCoin.TurtleTransaction subBuilder = new global::TurtleToTurtle.TurtleCoin.TurtleTransaction();
            if (dataCase_ == DataOneofCase.Transaction) {
              subBuilder.MergeFrom(Transaction);
            }
            input.ReadMessage(subBuilder);
            Transaction = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
