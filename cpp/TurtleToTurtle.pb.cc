// Copyright (c) 2018, The TurtleCoin Developers
// 
// Please see the included LICENSE file for more information.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TurtleToTurtle.proto

#include "TurtleToTurtle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_TurtleCoin_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TurtleCoin_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TurtleTransaction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TurtleCoin_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TurtleBlock;
}  // namespace protobuf_TurtleCoin_2eproto
namespace protobuf_TurtleToTurtle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TurtleToTurtle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_T2TCandidateListRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TurtleToTurtle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_T2TNodeCapability;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TurtleToTurtle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_T2TCandidate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TurtleToTurtle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_T2TCandidateList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TurtleToTurtle_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BlockChainPayload;
}  // namespace protobuf_TurtleToTurtle_2eproto
namespace TurtleToTurtle {
class T2TDatagramDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<T2TDatagram>
      _instance;
  const ::TurtleToTurtle::T2TCandidateList* t2tcandidatelist_;
  const ::TurtleToTurtle::T2TCandidateListRequest* t2tcandidatelistrequest_;
  const ::TurtleToTurtle::BlockChainPayload* blockchainpayload_;
} _T2TDatagram_default_instance_;
class T2TCandidateListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<T2TCandidateList>
      _instance;
} _T2TCandidateList_default_instance_;
class T2TCandidateListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<T2TCandidateListRequest>
      _instance;
} _T2TCandidateListRequest_default_instance_;
class T2TCandidateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<T2TCandidate>
      _instance;
} _T2TCandidate_default_instance_;
class T2TNodeCapabilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<T2TNodeCapability>
      _instance;
} _T2TNodeCapability_default_instance_;
class BlockChainPayloadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockChainPayload>
      _instance;
  const ::TurtleToTurtle::TurtleCoin::TurtleBlock* block_;
  const ::TurtleToTurtle::TurtleCoin::TurtleTransaction* transaction_;
} _BlockChainPayload_default_instance_;
}  // namespace TurtleToTurtle
namespace protobuf_TurtleToTurtle_2eproto {
static void InitDefaultsT2TDatagram() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TurtleToTurtle::_T2TDatagram_default_instance_;
    new (ptr) ::TurtleToTurtle::T2TDatagram();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TurtleToTurtle::T2TDatagram::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_T2TDatagram =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsT2TDatagram}, {
      &protobuf_TurtleToTurtle_2eproto::scc_info_T2TCandidateList.base,
      &protobuf_TurtleToTurtle_2eproto::scc_info_T2TCandidateListRequest.base,
      &protobuf_TurtleToTurtle_2eproto::scc_info_BlockChainPayload.base,}};

static void InitDefaultsT2TCandidateList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TurtleToTurtle::_T2TCandidateList_default_instance_;
    new (ptr) ::TurtleToTurtle::T2TCandidateList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TurtleToTurtle::T2TCandidateList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_T2TCandidateList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsT2TCandidateList}, {
      &protobuf_TurtleToTurtle_2eproto::scc_info_T2TCandidate.base,}};

static void InitDefaultsT2TCandidateListRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TurtleToTurtle::_T2TCandidateListRequest_default_instance_;
    new (ptr) ::TurtleToTurtle::T2TCandidateListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TurtleToTurtle::T2TCandidateListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_T2TCandidateListRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsT2TCandidateListRequest}, {}};

static void InitDefaultsT2TCandidate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TurtleToTurtle::_T2TCandidate_default_instance_;
    new (ptr) ::TurtleToTurtle::T2TCandidate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TurtleToTurtle::T2TCandidate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_T2TCandidate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsT2TCandidate}, {
      &protobuf_TurtleToTurtle_2eproto::scc_info_T2TNodeCapability.base,}};

static void InitDefaultsT2TNodeCapability() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TurtleToTurtle::_T2TNodeCapability_default_instance_;
    new (ptr) ::TurtleToTurtle::T2TNodeCapability();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TurtleToTurtle::T2TNodeCapability::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_T2TNodeCapability =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsT2TNodeCapability}, {}};

static void InitDefaultsBlockChainPayload() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TurtleToTurtle::_BlockChainPayload_default_instance_;
    new (ptr) ::TurtleToTurtle::BlockChainPayload();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TurtleToTurtle::BlockChainPayload::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BlockChainPayload =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBlockChainPayload}, {
      &protobuf_TurtleCoin_2eproto::scc_info_TurtleBlock.base,
      &protobuf_TurtleCoin_2eproto::scc_info_TurtleTransaction.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_T2TDatagram.base);
  ::google::protobuf::internal::InitSCC(&scc_info_T2TCandidateList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_T2TCandidateListRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_T2TCandidate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_T2TNodeCapability.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockChainPayload.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TDatagram, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TDatagram, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TDatagram, p2pnetworkid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TDatagram, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TDatagram, peerid_),
  offsetof(::TurtleToTurtle::T2TDatagramDefaultTypeInternal, t2tcandidatelist_),
  offsetof(::TurtleToTurtle::T2TDatagramDefaultTypeInternal, t2tcandidatelistrequest_),
  offsetof(::TurtleToTurtle::T2TDatagramDefaultTypeInternal, blockchainpayload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TDatagram, dataPayload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidateList, candidate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidateListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidateListRequest, blockchainid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidate, peerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidate, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidate, ipv4address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidate, ipv6address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidate, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidate, ttl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TCandidate, capability_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TNodeCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TNodeCapability, archival_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::T2TNodeCapability, blockchainid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::BlockChainPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::BlockChainPayload, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::TurtleToTurtle::BlockChainPayloadDefaultTypeInternal, block_),
  offsetof(::TurtleToTurtle::BlockChainPayloadDefaultTypeInternal, transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TurtleToTurtle::BlockChainPayload, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TurtleToTurtle::T2TDatagram)},
  { 12, -1, sizeof(::TurtleToTurtle::T2TCandidateList)},
  { 18, -1, sizeof(::TurtleToTurtle::T2TCandidateListRequest)},
  { 24, -1, sizeof(::TurtleToTurtle::T2TCandidate)},
  { 36, -1, sizeof(::TurtleToTurtle::T2TNodeCapability)},
  { 43, -1, sizeof(::TurtleToTurtle::BlockChainPayload)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::TurtleToTurtle::_T2TDatagram_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::TurtleToTurtle::_T2TCandidateList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::TurtleToTurtle::_T2TCandidateListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::TurtleToTurtle::_T2TCandidate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::TurtleToTurtle::_T2TNodeCapability_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::TurtleToTurtle::_BlockChainPayload_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "TurtleToTurtle.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024TurtleToTurtle.proto\022\016TurtleToTurtle\032\020"
      "TurtleCoin.proto\"\235\002\n\013T2TDatagram\022\024\n\014p2pN"
      "etworkId\030\001 \001(\r\022\017\n\007version\030\002 \001(\r\022\016\n\006peerI"
      "d\030\003 \001(\t\022<\n\020t2tCandidateList\030\004 \001(\0132 .Turt"
      "leToTurtle.T2TCandidateListH\000\022J\n\027t2tCand"
      "idateListRequest\030\005 \001(\0132\'.TurtleToTurtle."
      "T2TCandidateListRequestH\000\022>\n\021blockChainP"
      "ayload\030\006 \001(\0132!.TurtleToTurtle.BlockChain"
      "PayloadH\000B\r\n\013dataPayload\"C\n\020T2TCandidate"
      "List\022/\n\tcandidate\030\001 \003(\0132\034.TurtleToTurtle"
      ".T2TCandidate\"/\n\027T2TCandidateListRequest"
      "\022\024\n\014blockChainId\030\001 \003(\r\"\253\001\n\014T2TCandidate\022"
      "\016\n\006peerId\030\001 \001(\t\022\017\n\007version\030\002 \001(\r\022\023\n\013ipV4"
      "Address\030\003 \001(\r\022\023\n\013ipV6Address\030\004 \001(\t\022\014\n\004po"
      "rt\030\005 \001(\r\022\013\n\003ttl\030\006 \001(\r\0225\n\ncapability\030\007 \001("
      "\0132!.TurtleToTurtle.T2TNodeCapability\";\n\021"
      "T2TNodeCapability\022\020\n\010archival\030\001 \001(\010\022\024\n\014b"
      "lockChainId\030\002 \003(\r\"\231\001\n\021BlockChainPayload\022"
      "7\n\005block\030\001 \001(\0132&.TurtleToTurtle.TurtleCo"
      "in.TurtleBlockH\000\022C\n\013transaction\030\002 \001(\0132,."
      "TurtleToTurtle.TurtleCoin.TurtleTransact"
      "ionH\000B\006\n\004datab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 861);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TurtleToTurtle.proto", &protobuf_RegisterTypes);
  ::protobuf_TurtleCoin_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_TurtleToTurtle_2eproto
namespace TurtleToTurtle {

// ===================================================================

void T2TDatagram::InitAsDefaultInstance() {
  ::TurtleToTurtle::_T2TDatagram_default_instance_.t2tcandidatelist_ = const_cast< ::TurtleToTurtle::T2TCandidateList*>(
      ::TurtleToTurtle::T2TCandidateList::internal_default_instance());
  ::TurtleToTurtle::_T2TDatagram_default_instance_.t2tcandidatelistrequest_ = const_cast< ::TurtleToTurtle::T2TCandidateListRequest*>(
      ::TurtleToTurtle::T2TCandidateListRequest::internal_default_instance());
  ::TurtleToTurtle::_T2TDatagram_default_instance_.blockchainpayload_ = const_cast< ::TurtleToTurtle::BlockChainPayload*>(
      ::TurtleToTurtle::BlockChainPayload::internal_default_instance());
}
void T2TDatagram::set_allocated_t2tcandidatelist(::TurtleToTurtle::T2TCandidateList* t2tcandidatelist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dataPayload();
  if (t2tcandidatelist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      t2tcandidatelist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, t2tcandidatelist, submessage_arena);
    }
    set_has_t2tcandidatelist();
    dataPayload_.t2tcandidatelist_ = t2tcandidatelist;
  }
  // @@protoc_insertion_point(field_set_allocated:TurtleToTurtle.T2TDatagram.t2tCandidateList)
}
void T2TDatagram::set_allocated_t2tcandidatelistrequest(::TurtleToTurtle::T2TCandidateListRequest* t2tcandidatelistrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dataPayload();
  if (t2tcandidatelistrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      t2tcandidatelistrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, t2tcandidatelistrequest, submessage_arena);
    }
    set_has_t2tcandidatelistrequest();
    dataPayload_.t2tcandidatelistrequest_ = t2tcandidatelistrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:TurtleToTurtle.T2TDatagram.t2tCandidateListRequest)
}
void T2TDatagram::set_allocated_blockchainpayload(::TurtleToTurtle::BlockChainPayload* blockchainpayload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_dataPayload();
  if (blockchainpayload) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blockchainpayload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blockchainpayload, submessage_arena);
    }
    set_has_blockchainpayload();
    dataPayload_.blockchainpayload_ = blockchainpayload;
  }
  // @@protoc_insertion_point(field_set_allocated:TurtleToTurtle.T2TDatagram.blockChainPayload)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int T2TDatagram::kP2PNetworkIdFieldNumber;
const int T2TDatagram::kVersionFieldNumber;
const int T2TDatagram::kPeerIdFieldNumber;
const int T2TDatagram::kT2TCandidateListFieldNumber;
const int T2TDatagram::kT2TCandidateListRequestFieldNumber;
const int T2TDatagram::kBlockChainPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

T2TDatagram::T2TDatagram()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TurtleToTurtle_2eproto::scc_info_T2TDatagram.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TurtleToTurtle.T2TDatagram)
}
T2TDatagram::T2TDatagram(const T2TDatagram& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.peerid().size() > 0) {
    peerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peerid_);
  }
  ::memcpy(&p2pnetworkid_, &from.p2pnetworkid_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&p2pnetworkid_)) + sizeof(version_));
  clear_has_dataPayload();
  switch (from.dataPayload_case()) {
    case kT2TCandidateList: {
      mutable_t2tcandidatelist()->::TurtleToTurtle::T2TCandidateList::MergeFrom(from.t2tcandidatelist());
      break;
    }
    case kT2TCandidateListRequest: {
      mutable_t2tcandidatelistrequest()->::TurtleToTurtle::T2TCandidateListRequest::MergeFrom(from.t2tcandidatelistrequest());
      break;
    }
    case kBlockChainPayload: {
      mutable_blockchainpayload()->::TurtleToTurtle::BlockChainPayload::MergeFrom(from.blockchainpayload());
      break;
    }
    case DATAPAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TurtleToTurtle.T2TDatagram)
}

void T2TDatagram::SharedCtor() {
  peerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&p2pnetworkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&p2pnetworkid_)) + sizeof(version_));
  clear_has_dataPayload();
}

T2TDatagram::~T2TDatagram() {
  // @@protoc_insertion_point(destructor:TurtleToTurtle.T2TDatagram)
  SharedDtor();
}

void T2TDatagram::SharedDtor() {
  peerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_dataPayload()) {
    clear_dataPayload();
  }
}

void T2TDatagram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* T2TDatagram::descriptor() {
  ::protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const T2TDatagram& T2TDatagram::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TurtleToTurtle_2eproto::scc_info_T2TDatagram.base);
  return *internal_default_instance();
}


void T2TDatagram::clear_dataPayload() {
// @@protoc_insertion_point(one_of_clear_start:TurtleToTurtle.T2TDatagram)
  switch (dataPayload_case()) {
    case kT2TCandidateList: {
      delete dataPayload_.t2tcandidatelist_;
      break;
    }
    case kT2TCandidateListRequest: {
      delete dataPayload_.t2tcandidatelistrequest_;
      break;
    }
    case kBlockChainPayload: {
      delete dataPayload_.blockchainpayload_;
      break;
    }
    case DATAPAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATAPAYLOAD_NOT_SET;
}


void T2TDatagram::Clear() {
// @@protoc_insertion_point(message_clear_start:TurtleToTurtle.T2TDatagram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&p2pnetworkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&p2pnetworkid_)) + sizeof(version_));
  clear_dataPayload();
  _internal_metadata_.Clear();
}

bool T2TDatagram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TurtleToTurtle.T2TDatagram)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 p2pNetworkId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p2pnetworkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string peerId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peerid().data(), static_cast<int>(this->peerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TurtleToTurtle.T2TDatagram.peerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TurtleToTurtle.T2TCandidateList t2tCandidateList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_t2tcandidatelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TurtleToTurtle.T2TCandidateListRequest t2tCandidateListRequest = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_t2tcandidatelistrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TurtleToTurtle.BlockChainPayload blockChainPayload = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blockchainpayload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TurtleToTurtle.T2TDatagram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TurtleToTurtle.T2TDatagram)
  return false;
#undef DO_
}

void T2TDatagram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TurtleToTurtle.T2TDatagram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 p2pNetworkId = 1;
  if (this->p2pnetworkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->p2pnetworkid(), output);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // string peerId = 3;
  if (this->peerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerid().data(), static_cast<int>(this->peerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TurtleToTurtle.T2TDatagram.peerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peerid(), output);
  }

  // .TurtleToTurtle.T2TCandidateList t2tCandidateList = 4;
  if (has_t2tcandidatelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_t2tcandidatelist(), output);
  }

  // .TurtleToTurtle.T2TCandidateListRequest t2tCandidateListRequest = 5;
  if (has_t2tcandidatelistrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_t2tcandidatelistrequest(), output);
  }

  // .TurtleToTurtle.BlockChainPayload blockChainPayload = 6;
  if (has_blockchainpayload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_blockchainpayload(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TurtleToTurtle.T2TDatagram)
}

::google::protobuf::uint8* T2TDatagram::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TurtleToTurtle.T2TDatagram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 p2pNetworkId = 1;
  if (this->p2pnetworkid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->p2pnetworkid(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // string peerId = 3;
  if (this->peerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerid().data(), static_cast<int>(this->peerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TurtleToTurtle.T2TDatagram.peerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peerid(), target);
  }

  // .TurtleToTurtle.T2TCandidateList t2tCandidateList = 4;
  if (has_t2tcandidatelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_t2tcandidatelist(), deterministic, target);
  }

  // .TurtleToTurtle.T2TCandidateListRequest t2tCandidateListRequest = 5;
  if (has_t2tcandidatelistrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_t2tcandidatelistrequest(), deterministic, target);
  }

  // .TurtleToTurtle.BlockChainPayload blockChainPayload = 6;
  if (has_blockchainpayload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_blockchainpayload(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TurtleToTurtle.T2TDatagram)
  return target;
}

size_t T2TDatagram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TurtleToTurtle.T2TDatagram)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string peerId = 3;
  if (this->peerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peerid());
  }

  // uint32 p2pNetworkId = 1;
  if (this->p2pnetworkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->p2pnetworkid());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  switch (dataPayload_case()) {
    // .TurtleToTurtle.T2TCandidateList t2tCandidateList = 4;
    case kT2TCandidateList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dataPayload_.t2tcandidatelist_);
      break;
    }
    // .TurtleToTurtle.T2TCandidateListRequest t2tCandidateListRequest = 5;
    case kT2TCandidateListRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dataPayload_.t2tcandidatelistrequest_);
      break;
    }
    // .TurtleToTurtle.BlockChainPayload blockChainPayload = 6;
    case kBlockChainPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dataPayload_.blockchainpayload_);
      break;
    }
    case DATAPAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void T2TDatagram::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TurtleToTurtle.T2TDatagram)
  GOOGLE_DCHECK_NE(&from, this);
  const T2TDatagram* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const T2TDatagram>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TurtleToTurtle.T2TDatagram)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TurtleToTurtle.T2TDatagram)
    MergeFrom(*source);
  }
}

void T2TDatagram::MergeFrom(const T2TDatagram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TurtleToTurtle.T2TDatagram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peerid().size() > 0) {

    peerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peerid_);
  }
  if (from.p2pnetworkid() != 0) {
    set_p2pnetworkid(from.p2pnetworkid());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  switch (from.dataPayload_case()) {
    case kT2TCandidateList: {
      mutable_t2tcandidatelist()->::TurtleToTurtle::T2TCandidateList::MergeFrom(from.t2tcandidatelist());
      break;
    }
    case kT2TCandidateListRequest: {
      mutable_t2tcandidatelistrequest()->::TurtleToTurtle::T2TCandidateListRequest::MergeFrom(from.t2tcandidatelistrequest());
      break;
    }
    case kBlockChainPayload: {
      mutable_blockchainpayload()->::TurtleToTurtle::BlockChainPayload::MergeFrom(from.blockchainpayload());
      break;
    }
    case DATAPAYLOAD_NOT_SET: {
      break;
    }
  }
}

void T2TDatagram::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TurtleToTurtle.T2TDatagram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void T2TDatagram::CopyFrom(const T2TDatagram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TurtleToTurtle.T2TDatagram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool T2TDatagram::IsInitialized() const {
  return true;
}

void T2TDatagram::Swap(T2TDatagram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void T2TDatagram::InternalSwap(T2TDatagram* other) {
  using std::swap;
  peerid_.Swap(&other->peerid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(p2pnetworkid_, other->p2pnetworkid_);
  swap(version_, other->version_);
  swap(dataPayload_, other->dataPayload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata T2TDatagram::GetMetadata() const {
  protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void T2TCandidateList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int T2TCandidateList::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

T2TCandidateList::T2TCandidateList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TurtleToTurtle_2eproto::scc_info_T2TCandidateList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TurtleToTurtle.T2TCandidateList)
}
T2TCandidateList::T2TCandidateList(const T2TCandidateList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TurtleToTurtle.T2TCandidateList)
}

void T2TCandidateList::SharedCtor() {
}

T2TCandidateList::~T2TCandidateList() {
  // @@protoc_insertion_point(destructor:TurtleToTurtle.T2TCandidateList)
  SharedDtor();
}

void T2TCandidateList::SharedDtor() {
}

void T2TCandidateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* T2TCandidateList::descriptor() {
  ::protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const T2TCandidateList& T2TCandidateList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TurtleToTurtle_2eproto::scc_info_T2TCandidateList.base);
  return *internal_default_instance();
}


void T2TCandidateList::Clear() {
// @@protoc_insertion_point(message_clear_start:TurtleToTurtle.T2TCandidateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  _internal_metadata_.Clear();
}

bool T2TCandidateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TurtleToTurtle.T2TCandidateList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TurtleToTurtle.T2TCandidate candidate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TurtleToTurtle.T2TCandidateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TurtleToTurtle.T2TCandidateList)
  return false;
#undef DO_
}

void T2TCandidateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TurtleToTurtle.T2TCandidateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TurtleToTurtle.T2TCandidate candidate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->candidate(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TurtleToTurtle.T2TCandidateList)
}

::google::protobuf::uint8* T2TCandidateList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TurtleToTurtle.T2TCandidateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TurtleToTurtle.T2TCandidate candidate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->candidate(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TurtleToTurtle.T2TCandidateList)
  return target;
}

size_t T2TCandidateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TurtleToTurtle.T2TCandidateList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .TurtleToTurtle.T2TCandidate candidate = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->candidate(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void T2TCandidateList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TurtleToTurtle.T2TCandidateList)
  GOOGLE_DCHECK_NE(&from, this);
  const T2TCandidateList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const T2TCandidateList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TurtleToTurtle.T2TCandidateList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TurtleToTurtle.T2TCandidateList)
    MergeFrom(*source);
  }
}

void T2TCandidateList::MergeFrom(const T2TCandidateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TurtleToTurtle.T2TCandidateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
}

void T2TCandidateList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TurtleToTurtle.T2TCandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void T2TCandidateList::CopyFrom(const T2TCandidateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TurtleToTurtle.T2TCandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool T2TCandidateList::IsInitialized() const {
  return true;
}

void T2TCandidateList::Swap(T2TCandidateList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void T2TCandidateList::InternalSwap(T2TCandidateList* other) {
  using std::swap;
  CastToBase(&candidate_)->InternalSwap(CastToBase(&other->candidate_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata T2TCandidateList::GetMetadata() const {
  protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void T2TCandidateListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int T2TCandidateListRequest::kBlockChainIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

T2TCandidateListRequest::T2TCandidateListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TurtleToTurtle_2eproto::scc_info_T2TCandidateListRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TurtleToTurtle.T2TCandidateListRequest)
}
T2TCandidateListRequest::T2TCandidateListRequest(const T2TCandidateListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      blockchainid_(from.blockchainid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TurtleToTurtle.T2TCandidateListRequest)
}

void T2TCandidateListRequest::SharedCtor() {
}

T2TCandidateListRequest::~T2TCandidateListRequest() {
  // @@protoc_insertion_point(destructor:TurtleToTurtle.T2TCandidateListRequest)
  SharedDtor();
}

void T2TCandidateListRequest::SharedDtor() {
}

void T2TCandidateListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* T2TCandidateListRequest::descriptor() {
  ::protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const T2TCandidateListRequest& T2TCandidateListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TurtleToTurtle_2eproto::scc_info_T2TCandidateListRequest.base);
  return *internal_default_instance();
}


void T2TCandidateListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TurtleToTurtle.T2TCandidateListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockchainid_.Clear();
  _internal_metadata_.Clear();
}

bool T2TCandidateListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TurtleToTurtle.T2TCandidateListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 blockChainId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_blockchainid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_blockchainid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TurtleToTurtle.T2TCandidateListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TurtleToTurtle.T2TCandidateListRequest)
  return false;
#undef DO_
}

void T2TCandidateListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TurtleToTurtle.T2TCandidateListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 blockChainId = 1;
  if (this->blockchainid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _blockchainid_cached_byte_size_));
  }
  for (int i = 0, n = this->blockchainid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->blockchainid(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TurtleToTurtle.T2TCandidateListRequest)
}

::google::protobuf::uint8* T2TCandidateListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TurtleToTurtle.T2TCandidateListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 blockChainId = 1;
  if (this->blockchainid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _blockchainid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->blockchainid_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TurtleToTurtle.T2TCandidateListRequest)
  return target;
}

size_t T2TCandidateListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TurtleToTurtle.T2TCandidateListRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 blockChainId = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->blockchainid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _blockchainid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void T2TCandidateListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TurtleToTurtle.T2TCandidateListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const T2TCandidateListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const T2TCandidateListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TurtleToTurtle.T2TCandidateListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TurtleToTurtle.T2TCandidateListRequest)
    MergeFrom(*source);
  }
}

void T2TCandidateListRequest::MergeFrom(const T2TCandidateListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TurtleToTurtle.T2TCandidateListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockchainid_.MergeFrom(from.blockchainid_);
}

void T2TCandidateListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TurtleToTurtle.T2TCandidateListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void T2TCandidateListRequest::CopyFrom(const T2TCandidateListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TurtleToTurtle.T2TCandidateListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool T2TCandidateListRequest::IsInitialized() const {
  return true;
}

void T2TCandidateListRequest::Swap(T2TCandidateListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void T2TCandidateListRequest::InternalSwap(T2TCandidateListRequest* other) {
  using std::swap;
  blockchainid_.InternalSwap(&other->blockchainid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata T2TCandidateListRequest::GetMetadata() const {
  protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void T2TCandidate::InitAsDefaultInstance() {
  ::TurtleToTurtle::_T2TCandidate_default_instance_._instance.get_mutable()->capability_ = const_cast< ::TurtleToTurtle::T2TNodeCapability*>(
      ::TurtleToTurtle::T2TNodeCapability::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int T2TCandidate::kPeerIdFieldNumber;
const int T2TCandidate::kVersionFieldNumber;
const int T2TCandidate::kIpV4AddressFieldNumber;
const int T2TCandidate::kIpV6AddressFieldNumber;
const int T2TCandidate::kPortFieldNumber;
const int T2TCandidate::kTtlFieldNumber;
const int T2TCandidate::kCapabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

T2TCandidate::T2TCandidate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TurtleToTurtle_2eproto::scc_info_T2TCandidate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TurtleToTurtle.T2TCandidate)
}
T2TCandidate::T2TCandidate(const T2TCandidate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.peerid().size() > 0) {
    peerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peerid_);
  }
  ipv6address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipv6address().size() > 0) {
    ipv6address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6address_);
  }
  if (from.has_capability()) {
    capability_ = new ::TurtleToTurtle::T2TNodeCapability(*from.capability_);
  } else {
    capability_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&version_)) + sizeof(ttl_));
  // @@protoc_insertion_point(copy_constructor:TurtleToTurtle.T2TCandidate)
}

void T2TCandidate::SharedCtor() {
  peerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&capability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&capability_)) + sizeof(ttl_));
}

T2TCandidate::~T2TCandidate() {
  // @@protoc_insertion_point(destructor:TurtleToTurtle.T2TCandidate)
  SharedDtor();
}

void T2TCandidate::SharedDtor() {
  peerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capability_;
}

void T2TCandidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* T2TCandidate::descriptor() {
  ::protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const T2TCandidate& T2TCandidate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TurtleToTurtle_2eproto::scc_info_T2TCandidate.base);
  return *internal_default_instance();
}


void T2TCandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:TurtleToTurtle.T2TCandidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && capability_ != NULL) {
    delete capability_;
  }
  capability_ = NULL;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&version_)) + sizeof(ttl_));
  _internal_metadata_.Clear();
}

bool T2TCandidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TurtleToTurtle.T2TCandidate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string peerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peerid().data(), static_cast<int>(this->peerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TurtleToTurtle.T2TCandidate.peerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ipV4Address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv4address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ipV6Address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipv6address().data(), static_cast<int>(this->ipv6address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TurtleToTurtle.T2TCandidate.ipV6Address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ttl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TurtleToTurtle.T2TNodeCapability capability = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_capability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TurtleToTurtle.T2TCandidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TurtleToTurtle.T2TCandidate)
  return false;
#undef DO_
}

void T2TCandidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TurtleToTurtle.T2TCandidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string peerId = 1;
  if (this->peerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerid().data(), static_cast<int>(this->peerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TurtleToTurtle.T2TCandidate.peerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->peerid(), output);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // uint32 ipV4Address = 3;
  if (this->ipv4address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ipv4address(), output);
  }

  // string ipV6Address = 4;
  if (this->ipv6address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6address().data(), static_cast<int>(this->ipv6address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TurtleToTurtle.T2TCandidate.ipV6Address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ipv6address(), output);
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // uint32 ttl = 6;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ttl(), output);
  }

  // .TurtleToTurtle.T2TNodeCapability capability = 7;
  if (this->has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_capability(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TurtleToTurtle.T2TCandidate)
}

::google::protobuf::uint8* T2TCandidate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TurtleToTurtle.T2TCandidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string peerId = 1;
  if (this->peerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peerid().data(), static_cast<int>(this->peerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TurtleToTurtle.T2TCandidate.peerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peerid(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // uint32 ipV4Address = 3;
  if (this->ipv4address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ipv4address(), target);
  }

  // string ipV6Address = 4;
  if (this->ipv6address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipv6address().data(), static_cast<int>(this->ipv6address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TurtleToTurtle.T2TCandidate.ipV6Address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ipv6address(), target);
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // uint32 ttl = 6;
  if (this->ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ttl(), target);
  }

  // .TurtleToTurtle.T2TNodeCapability capability = 7;
  if (this->has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_capability(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TurtleToTurtle.T2TCandidate)
  return target;
}

size_t T2TCandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TurtleToTurtle.T2TCandidate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string peerId = 1;
  if (this->peerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peerid());
  }

  // string ipV6Address = 4;
  if (this->ipv6address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipv6address());
  }

  // .TurtleToTurtle.T2TNodeCapability capability = 7;
  if (this->has_capability()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *capability_);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 ipV4Address = 3;
  if (this->ipv4address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipv4address());
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 ttl = 6;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ttl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void T2TCandidate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TurtleToTurtle.T2TCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  const T2TCandidate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const T2TCandidate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TurtleToTurtle.T2TCandidate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TurtleToTurtle.T2TCandidate)
    MergeFrom(*source);
  }
}

void T2TCandidate::MergeFrom(const T2TCandidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TurtleToTurtle.T2TCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peerid().size() > 0) {

    peerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peerid_);
  }
  if (from.ipv6address().size() > 0) {

    ipv6address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6address_);
  }
  if (from.has_capability()) {
    mutable_capability()->::TurtleToTurtle::T2TNodeCapability::MergeFrom(from.capability());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.ipv4address() != 0) {
    set_ipv4address(from.ipv4address());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
}

void T2TCandidate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TurtleToTurtle.T2TCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void T2TCandidate::CopyFrom(const T2TCandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TurtleToTurtle.T2TCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool T2TCandidate::IsInitialized() const {
  return true;
}

void T2TCandidate::Swap(T2TCandidate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void T2TCandidate::InternalSwap(T2TCandidate* other) {
  using std::swap;
  peerid_.Swap(&other->peerid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipv6address_.Swap(&other->ipv6address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capability_, other->capability_);
  swap(version_, other->version_);
  swap(ipv4address_, other->ipv4address_);
  swap(port_, other->port_);
  swap(ttl_, other->ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata T2TCandidate::GetMetadata() const {
  protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void T2TNodeCapability::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int T2TNodeCapability::kArchivalFieldNumber;
const int T2TNodeCapability::kBlockChainIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

T2TNodeCapability::T2TNodeCapability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TurtleToTurtle_2eproto::scc_info_T2TNodeCapability.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TurtleToTurtle.T2TNodeCapability)
}
T2TNodeCapability::T2TNodeCapability(const T2TNodeCapability& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      blockchainid_(from.blockchainid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  archival_ = from.archival_;
  // @@protoc_insertion_point(copy_constructor:TurtleToTurtle.T2TNodeCapability)
}

void T2TNodeCapability::SharedCtor() {
  archival_ = false;
}

T2TNodeCapability::~T2TNodeCapability() {
  // @@protoc_insertion_point(destructor:TurtleToTurtle.T2TNodeCapability)
  SharedDtor();
}

void T2TNodeCapability::SharedDtor() {
}

void T2TNodeCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* T2TNodeCapability::descriptor() {
  ::protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const T2TNodeCapability& T2TNodeCapability::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TurtleToTurtle_2eproto::scc_info_T2TNodeCapability.base);
  return *internal_default_instance();
}


void T2TNodeCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:TurtleToTurtle.T2TNodeCapability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockchainid_.Clear();
  archival_ = false;
  _internal_metadata_.Clear();
}

bool T2TNodeCapability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TurtleToTurtle.T2TNodeCapability)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool archival = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &archival_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 blockChainId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_blockchainid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_blockchainid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TurtleToTurtle.T2TNodeCapability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TurtleToTurtle.T2TNodeCapability)
  return false;
#undef DO_
}

void T2TNodeCapability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TurtleToTurtle.T2TNodeCapability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool archival = 1;
  if (this->archival() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->archival(), output);
  }

  // repeated uint32 blockChainId = 2;
  if (this->blockchainid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _blockchainid_cached_byte_size_));
  }
  for (int i = 0, n = this->blockchainid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->blockchainid(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TurtleToTurtle.T2TNodeCapability)
}

::google::protobuf::uint8* T2TNodeCapability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TurtleToTurtle.T2TNodeCapability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool archival = 1;
  if (this->archival() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->archival(), target);
  }

  // repeated uint32 blockChainId = 2;
  if (this->blockchainid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _blockchainid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->blockchainid_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TurtleToTurtle.T2TNodeCapability)
  return target;
}

size_t T2TNodeCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TurtleToTurtle.T2TNodeCapability)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 blockChainId = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->blockchainid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _blockchainid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool archival = 1;
  if (this->archival() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void T2TNodeCapability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TurtleToTurtle.T2TNodeCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const T2TNodeCapability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const T2TNodeCapability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TurtleToTurtle.T2TNodeCapability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TurtleToTurtle.T2TNodeCapability)
    MergeFrom(*source);
  }
}

void T2TNodeCapability::MergeFrom(const T2TNodeCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TurtleToTurtle.T2TNodeCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockchainid_.MergeFrom(from.blockchainid_);
  if (from.archival() != 0) {
    set_archival(from.archival());
  }
}

void T2TNodeCapability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TurtleToTurtle.T2TNodeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void T2TNodeCapability::CopyFrom(const T2TNodeCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TurtleToTurtle.T2TNodeCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool T2TNodeCapability::IsInitialized() const {
  return true;
}

void T2TNodeCapability::Swap(T2TNodeCapability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void T2TNodeCapability::InternalSwap(T2TNodeCapability* other) {
  using std::swap;
  blockchainid_.InternalSwap(&other->blockchainid_);
  swap(archival_, other->archival_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata T2TNodeCapability::GetMetadata() const {
  protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlockChainPayload::InitAsDefaultInstance() {
  ::TurtleToTurtle::_BlockChainPayload_default_instance_.block_ = const_cast< ::TurtleToTurtle::TurtleCoin::TurtleBlock*>(
      ::TurtleToTurtle::TurtleCoin::TurtleBlock::internal_default_instance());
  ::TurtleToTurtle::_BlockChainPayload_default_instance_.transaction_ = const_cast< ::TurtleToTurtle::TurtleCoin::TurtleTransaction*>(
      ::TurtleToTurtle::TurtleCoin::TurtleTransaction::internal_default_instance());
}
void BlockChainPayload::set_allocated_block(::TurtleToTurtle::TurtleCoin::TurtleBlock* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
    data_.block_ = block;
  }
  // @@protoc_insertion_point(field_set_allocated:TurtleToTurtle.BlockChainPayload.block)
}
void BlockChainPayload::clear_block() {
  if (has_block()) {
    delete data_.block_;
    clear_has_data();
  }
}
void BlockChainPayload::set_allocated_transaction(::TurtleToTurtle::TurtleCoin::TurtleTransaction* transaction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (transaction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transaction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    set_has_transaction();
    data_.transaction_ = transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:TurtleToTurtle.BlockChainPayload.transaction)
}
void BlockChainPayload::clear_transaction() {
  if (has_transaction()) {
    delete data_.transaction_;
    clear_has_data();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockChainPayload::kBlockFieldNumber;
const int BlockChainPayload::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockChainPayload::BlockChainPayload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TurtleToTurtle_2eproto::scc_info_BlockChainPayload.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TurtleToTurtle.BlockChainPayload)
}
BlockChainPayload::BlockChainPayload(const BlockChainPayload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kBlock: {
      mutable_block()->::TurtleToTurtle::TurtleCoin::TurtleBlock::MergeFrom(from.block());
      break;
    }
    case kTransaction: {
      mutable_transaction()->::TurtleToTurtle::TurtleCoin::TurtleTransaction::MergeFrom(from.transaction());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TurtleToTurtle.BlockChainPayload)
}

void BlockChainPayload::SharedCtor() {
  clear_has_data();
}

BlockChainPayload::~BlockChainPayload() {
  // @@protoc_insertion_point(destructor:TurtleToTurtle.BlockChainPayload)
  SharedDtor();
}

void BlockChainPayload::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void BlockChainPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BlockChainPayload::descriptor() {
  ::protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockChainPayload& BlockChainPayload::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TurtleToTurtle_2eproto::scc_info_BlockChainPayload.base);
  return *internal_default_instance();
}


void BlockChainPayload::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:TurtleToTurtle.BlockChainPayload)
  switch (data_case()) {
    case kBlock: {
      delete data_.block_;
      break;
    }
    case kTransaction: {
      delete data_.transaction_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void BlockChainPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:TurtleToTurtle.BlockChainPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear();
}

bool BlockChainPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TurtleToTurtle.BlockChainPayload)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TurtleToTurtle.TurtleCoin.TurtleBlock block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TurtleToTurtle.TurtleCoin.TurtleTransaction transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TurtleToTurtle.BlockChainPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TurtleToTurtle.BlockChainPayload)
  return false;
#undef DO_
}

void BlockChainPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TurtleToTurtle.BlockChainPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TurtleToTurtle.TurtleCoin.TurtleBlock block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_block(), output);
  }

  // .TurtleToTurtle.TurtleCoin.TurtleTransaction transaction = 2;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_transaction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TurtleToTurtle.BlockChainPayload)
}

::google::protobuf::uint8* BlockChainPayload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TurtleToTurtle.BlockChainPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TurtleToTurtle.TurtleCoin.TurtleBlock block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_block(), deterministic, target);
  }

  // .TurtleToTurtle.TurtleCoin.TurtleTransaction transaction = 2;
  if (has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_transaction(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TurtleToTurtle.BlockChainPayload)
  return target;
}

size_t BlockChainPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TurtleToTurtle.BlockChainPayload)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (data_case()) {
    // .TurtleToTurtle.TurtleCoin.TurtleBlock block = 1;
    case kBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_.block_);
      break;
    }
    // .TurtleToTurtle.TurtleCoin.TurtleTransaction transaction = 2;
    case kTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_.transaction_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockChainPayload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TurtleToTurtle.BlockChainPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChainPayload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockChainPayload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TurtleToTurtle.BlockChainPayload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TurtleToTurtle.BlockChainPayload)
    MergeFrom(*source);
  }
}

void BlockChainPayload::MergeFrom(const BlockChainPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TurtleToTurtle.BlockChainPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kBlock: {
      mutable_block()->::TurtleToTurtle::TurtleCoin::TurtleBlock::MergeFrom(from.block());
      break;
    }
    case kTransaction: {
      mutable_transaction()->::TurtleToTurtle::TurtleCoin::TurtleTransaction::MergeFrom(from.transaction());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void BlockChainPayload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TurtleToTurtle.BlockChainPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChainPayload::CopyFrom(const BlockChainPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TurtleToTurtle.BlockChainPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChainPayload::IsInitialized() const {
  return true;
}

void BlockChainPayload::Swap(BlockChainPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockChainPayload::InternalSwap(BlockChainPayload* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlockChainPayload::GetMetadata() const {
  protobuf_TurtleToTurtle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TurtleToTurtle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TurtleToTurtle
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TurtleToTurtle::T2TDatagram* Arena::CreateMaybeMessage< ::TurtleToTurtle::T2TDatagram >(Arena* arena) {
  return Arena::CreateInternal< ::TurtleToTurtle::T2TDatagram >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TurtleToTurtle::T2TCandidateList* Arena::CreateMaybeMessage< ::TurtleToTurtle::T2TCandidateList >(Arena* arena) {
  return Arena::CreateInternal< ::TurtleToTurtle::T2TCandidateList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TurtleToTurtle::T2TCandidateListRequest* Arena::CreateMaybeMessage< ::TurtleToTurtle::T2TCandidateListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::TurtleToTurtle::T2TCandidateListRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TurtleToTurtle::T2TCandidate* Arena::CreateMaybeMessage< ::TurtleToTurtle::T2TCandidate >(Arena* arena) {
  return Arena::CreateInternal< ::TurtleToTurtle::T2TCandidate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TurtleToTurtle::T2TNodeCapability* Arena::CreateMaybeMessage< ::TurtleToTurtle::T2TNodeCapability >(Arena* arena) {
  return Arena::CreateInternal< ::TurtleToTurtle::T2TNodeCapability >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TurtleToTurtle::BlockChainPayload* Arena::CreateMaybeMessage< ::TurtleToTurtle::BlockChainPayload >(Arena* arena) {
  return Arena::CreateInternal< ::TurtleToTurtle::BlockChainPayload >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
