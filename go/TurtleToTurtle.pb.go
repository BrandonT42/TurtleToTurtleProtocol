// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: TurtleToTurtle.proto

package TurtleToTurtle

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type T2TDatagram struct {
	P2PNetworkId uint32 `protobuf:"varint,1,opt,name=p2pNetworkId,proto3" json:"p2pNetworkId,omitempty"`
	Version      uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	PeerId       string `protobuf:"bytes,3,opt,name=peerId,proto3" json:"peerId,omitempty"`
	Agent        string `protobuf:"bytes,4,opt,name=agent,proto3" json:"agent,omitempty"`
	NodeVersion  string `protobuf:"bytes,5,opt,name=nodeVersion,proto3" json:"nodeVersion,omitempty"`
	// Types that are valid to be assigned to DataPayload:
	//	*T2TDatagram_T2TCandidateList
	//	*T2TDatagram_T2TCandidateListRequest
	//	*T2TDatagram_BlockChainPayload
	DataPayload          isT2TDatagram_DataPayload `protobuf_oneof:"dataPayload"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *T2TDatagram) Reset()         { *m = T2TDatagram{} }
func (m *T2TDatagram) String() string { return proto.CompactTextString(m) }
func (*T2TDatagram) ProtoMessage()    {}
func (*T2TDatagram) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleToTurtle_2f01c49866f50048, []int{0}
}
func (m *T2TDatagram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_T2TDatagram.Unmarshal(m, b)
}
func (m *T2TDatagram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_T2TDatagram.Marshal(b, m, deterministic)
}
func (dst *T2TDatagram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_T2TDatagram.Merge(dst, src)
}
func (m *T2TDatagram) XXX_Size() int {
	return xxx_messageInfo_T2TDatagram.Size(m)
}
func (m *T2TDatagram) XXX_DiscardUnknown() {
	xxx_messageInfo_T2TDatagram.DiscardUnknown(m)
}

var xxx_messageInfo_T2TDatagram proto.InternalMessageInfo

type isT2TDatagram_DataPayload interface {
	isT2TDatagram_DataPayload()
}

type T2TDatagram_T2TCandidateList struct {
	T2TCandidateList *T2TCandidateList `protobuf:"bytes,6,opt,name=t2tCandidateList,proto3,oneof"`
}
type T2TDatagram_T2TCandidateListRequest struct {
	T2TCandidateListRequest *T2TCandidateListRequest `protobuf:"bytes,7,opt,name=t2tCandidateListRequest,proto3,oneof"`
}
type T2TDatagram_BlockChainPayload struct {
	BlockChainPayload *BlockChainPayload `protobuf:"bytes,8,opt,name=blockChainPayload,proto3,oneof"`
}

func (*T2TDatagram_T2TCandidateList) isT2TDatagram_DataPayload()        {}
func (*T2TDatagram_T2TCandidateListRequest) isT2TDatagram_DataPayload() {}
func (*T2TDatagram_BlockChainPayload) isT2TDatagram_DataPayload()       {}

func (m *T2TDatagram) GetDataPayload() isT2TDatagram_DataPayload {
	if m != nil {
		return m.DataPayload
	}
	return nil
}

func (m *T2TDatagram) GetP2PNetworkId() uint32 {
	if m != nil {
		return m.P2PNetworkId
	}
	return 0
}

func (m *T2TDatagram) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *T2TDatagram) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *T2TDatagram) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

func (m *T2TDatagram) GetNodeVersion() string {
	if m != nil {
		return m.NodeVersion
	}
	return ""
}

func (m *T2TDatagram) GetT2TCandidateList() *T2TCandidateList {
	if x, ok := m.GetDataPayload().(*T2TDatagram_T2TCandidateList); ok {
		return x.T2TCandidateList
	}
	return nil
}

func (m *T2TDatagram) GetT2TCandidateListRequest() *T2TCandidateListRequest {
	if x, ok := m.GetDataPayload().(*T2TDatagram_T2TCandidateListRequest); ok {
		return x.T2TCandidateListRequest
	}
	return nil
}

func (m *T2TDatagram) GetBlockChainPayload() *BlockChainPayload {
	if x, ok := m.GetDataPayload().(*T2TDatagram_BlockChainPayload); ok {
		return x.BlockChainPayload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*T2TDatagram) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _T2TDatagram_OneofMarshaler, _T2TDatagram_OneofUnmarshaler, _T2TDatagram_OneofSizer, []interface{}{
		(*T2TDatagram_T2TCandidateList)(nil),
		(*T2TDatagram_T2TCandidateListRequest)(nil),
		(*T2TDatagram_BlockChainPayload)(nil),
	}
}

func _T2TDatagram_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*T2TDatagram)
	// dataPayload
	switch x := m.DataPayload.(type) {
	case *T2TDatagram_T2TCandidateList:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.T2TCandidateList); err != nil {
			return err
		}
	case *T2TDatagram_T2TCandidateListRequest:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.T2TCandidateListRequest); err != nil {
			return err
		}
	case *T2TDatagram_BlockChainPayload:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockChainPayload); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("T2TDatagram.DataPayload has unexpected type %T", x)
	}
	return nil
}

func _T2TDatagram_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*T2TDatagram)
	switch tag {
	case 6: // dataPayload.t2tCandidateList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(T2TCandidateList)
		err := b.DecodeMessage(msg)
		m.DataPayload = &T2TDatagram_T2TCandidateList{msg}
		return true, err
	case 7: // dataPayload.t2tCandidateListRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(T2TCandidateListRequest)
		err := b.DecodeMessage(msg)
		m.DataPayload = &T2TDatagram_T2TCandidateListRequest{msg}
		return true, err
	case 8: // dataPayload.blockChainPayload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockChainPayload)
		err := b.DecodeMessage(msg)
		m.DataPayload = &T2TDatagram_BlockChainPayload{msg}
		return true, err
	default:
		return false, nil
	}
}

func _T2TDatagram_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*T2TDatagram)
	// dataPayload
	switch x := m.DataPayload.(type) {
	case *T2TDatagram_T2TCandidateList:
		s := proto.Size(x.T2TCandidateList)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *T2TDatagram_T2TCandidateListRequest:
		s := proto.Size(x.T2TCandidateListRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *T2TDatagram_BlockChainPayload:
		s := proto.Size(x.BlockChainPayload)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type T2TCandidateList struct {
	Candidate            []*T2TCandidate `protobuf:"bytes,1,rep,name=candidate,proto3" json:"candidate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *T2TCandidateList) Reset()         { *m = T2TCandidateList{} }
func (m *T2TCandidateList) String() string { return proto.CompactTextString(m) }
func (*T2TCandidateList) ProtoMessage()    {}
func (*T2TCandidateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleToTurtle_2f01c49866f50048, []int{1}
}
func (m *T2TCandidateList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_T2TCandidateList.Unmarshal(m, b)
}
func (m *T2TCandidateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_T2TCandidateList.Marshal(b, m, deterministic)
}
func (dst *T2TCandidateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_T2TCandidateList.Merge(dst, src)
}
func (m *T2TCandidateList) XXX_Size() int {
	return xxx_messageInfo_T2TCandidateList.Size(m)
}
func (m *T2TCandidateList) XXX_DiscardUnknown() {
	xxx_messageInfo_T2TCandidateList.DiscardUnknown(m)
}

var xxx_messageInfo_T2TCandidateList proto.InternalMessageInfo

func (m *T2TCandidateList) GetCandidate() []*T2TCandidate {
	if m != nil {
		return m.Candidate
	}
	return nil
}

type T2TCandidateListRequest struct {
	BlockChainId         []uint32 `protobuf:"varint,1,rep,packed,name=blockChainId,proto3" json:"blockChainId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *T2TCandidateListRequest) Reset()         { *m = T2TCandidateListRequest{} }
func (m *T2TCandidateListRequest) String() string { return proto.CompactTextString(m) }
func (*T2TCandidateListRequest) ProtoMessage()    {}
func (*T2TCandidateListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleToTurtle_2f01c49866f50048, []int{2}
}
func (m *T2TCandidateListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_T2TCandidateListRequest.Unmarshal(m, b)
}
func (m *T2TCandidateListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_T2TCandidateListRequest.Marshal(b, m, deterministic)
}
func (dst *T2TCandidateListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_T2TCandidateListRequest.Merge(dst, src)
}
func (m *T2TCandidateListRequest) XXX_Size() int {
	return xxx_messageInfo_T2TCandidateListRequest.Size(m)
}
func (m *T2TCandidateListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_T2TCandidateListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_T2TCandidateListRequest proto.InternalMessageInfo

func (m *T2TCandidateListRequest) GetBlockChainId() []uint32 {
	if m != nil {
		return m.BlockChainId
	}
	return nil
}

type T2TCandidate struct {
	PeerId               string             `protobuf:"bytes,1,opt,name=peerId,proto3" json:"peerId,omitempty"`
	Version              uint32             `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	IpV4Address          uint32             `protobuf:"varint,3,opt,name=ipV4Address,proto3" json:"ipV4Address,omitempty"`
	IpV6Address          string             `protobuf:"bytes,4,opt,name=ipV6Address,proto3" json:"ipV6Address,omitempty"`
	Port                 uint32             `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Ttl                  uint32             `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Capability           *T2TNodeCapability `protobuf:"bytes,7,opt,name=capability,proto3" json:"capability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *T2TCandidate) Reset()         { *m = T2TCandidate{} }
func (m *T2TCandidate) String() string { return proto.CompactTextString(m) }
func (*T2TCandidate) ProtoMessage()    {}
func (*T2TCandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleToTurtle_2f01c49866f50048, []int{3}
}
func (m *T2TCandidate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_T2TCandidate.Unmarshal(m, b)
}
func (m *T2TCandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_T2TCandidate.Marshal(b, m, deterministic)
}
func (dst *T2TCandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_T2TCandidate.Merge(dst, src)
}
func (m *T2TCandidate) XXX_Size() int {
	return xxx_messageInfo_T2TCandidate.Size(m)
}
func (m *T2TCandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_T2TCandidate.DiscardUnknown(m)
}

var xxx_messageInfo_T2TCandidate proto.InternalMessageInfo

func (m *T2TCandidate) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *T2TCandidate) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *T2TCandidate) GetIpV4Address() uint32 {
	if m != nil {
		return m.IpV4Address
	}
	return 0
}

func (m *T2TCandidate) GetIpV6Address() string {
	if m != nil {
		return m.IpV6Address
	}
	return ""
}

func (m *T2TCandidate) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *T2TCandidate) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *T2TCandidate) GetCapability() *T2TNodeCapability {
	if m != nil {
		return m.Capability
	}
	return nil
}

type T2TNodeCapability struct {
	Archival             bool     `protobuf:"varint,1,opt,name=archival,proto3" json:"archival,omitempty"`
	BlockChainId         []uint32 `protobuf:"varint,2,rep,packed,name=blockChainId,proto3" json:"blockChainId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *T2TNodeCapability) Reset()         { *m = T2TNodeCapability{} }
func (m *T2TNodeCapability) String() string { return proto.CompactTextString(m) }
func (*T2TNodeCapability) ProtoMessage()    {}
func (*T2TNodeCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleToTurtle_2f01c49866f50048, []int{4}
}
func (m *T2TNodeCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_T2TNodeCapability.Unmarshal(m, b)
}
func (m *T2TNodeCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_T2TNodeCapability.Marshal(b, m, deterministic)
}
func (dst *T2TNodeCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_T2TNodeCapability.Merge(dst, src)
}
func (m *T2TNodeCapability) XXX_Size() int {
	return xxx_messageInfo_T2TNodeCapability.Size(m)
}
func (m *T2TNodeCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_T2TNodeCapability.DiscardUnknown(m)
}

var xxx_messageInfo_T2TNodeCapability proto.InternalMessageInfo

func (m *T2TNodeCapability) GetArchival() bool {
	if m != nil {
		return m.Archival
	}
	return false
}

func (m *T2TNodeCapability) GetBlockChainId() []uint32 {
	if m != nil {
		return m.BlockChainId
	}
	return nil
}

type BlockChainPayload struct {
	BlockChainId uint32 `protobuf:"varint,1,opt,name=blockChainId,proto3" json:"blockChainId,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*BlockChainPayload_Block
	//	*BlockChainPayload_Transaction
	Data                 isBlockChainPayload_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BlockChainPayload) Reset()         { *m = BlockChainPayload{} }
func (m *BlockChainPayload) String() string { return proto.CompactTextString(m) }
func (*BlockChainPayload) ProtoMessage()    {}
func (*BlockChainPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleToTurtle_2f01c49866f50048, []int{5}
}
func (m *BlockChainPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockChainPayload.Unmarshal(m, b)
}
func (m *BlockChainPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockChainPayload.Marshal(b, m, deterministic)
}
func (dst *BlockChainPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockChainPayload.Merge(dst, src)
}
func (m *BlockChainPayload) XXX_Size() int {
	return xxx_messageInfo_BlockChainPayload.Size(m)
}
func (m *BlockChainPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockChainPayload.DiscardUnknown(m)
}

var xxx_messageInfo_BlockChainPayload proto.InternalMessageInfo

type isBlockChainPayload_Data interface {
	isBlockChainPayload_Data()
}

type BlockChainPayload_Block struct {
	Block *TurtleBlock `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}
type BlockChainPayload_Transaction struct {
	Transaction *TurtleTransaction `protobuf:"bytes,3,opt,name=transaction,proto3,oneof"`
}

func (*BlockChainPayload_Block) isBlockChainPayload_Data()       {}
func (*BlockChainPayload_Transaction) isBlockChainPayload_Data() {}

func (m *BlockChainPayload) GetData() isBlockChainPayload_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BlockChainPayload) GetBlockChainId() uint32 {
	if m != nil {
		return m.BlockChainId
	}
	return 0
}

func (m *BlockChainPayload) GetBlock() *TurtleBlock {
	if x, ok := m.GetData().(*BlockChainPayload_Block); ok {
		return x.Block
	}
	return nil
}

func (m *BlockChainPayload) GetTransaction() *TurtleTransaction {
	if x, ok := m.GetData().(*BlockChainPayload_Transaction); ok {
		return x.Transaction
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BlockChainPayload) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BlockChainPayload_OneofMarshaler, _BlockChainPayload_OneofUnmarshaler, _BlockChainPayload_OneofSizer, []interface{}{
		(*BlockChainPayload_Block)(nil),
		(*BlockChainPayload_Transaction)(nil),
	}
}

func _BlockChainPayload_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BlockChainPayload)
	// data
	switch x := m.Data.(type) {
	case *BlockChainPayload_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *BlockChainPayload_Transaction:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transaction); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BlockChainPayload.Data has unexpected type %T", x)
	}
	return nil
}

func _BlockChainPayload_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BlockChainPayload)
	switch tag {
	case 2: // data.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TurtleBlock)
		err := b.DecodeMessage(msg)
		m.Data = &BlockChainPayload_Block{msg}
		return true, err
	case 3: // data.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TurtleTransaction)
		err := b.DecodeMessage(msg)
		m.Data = &BlockChainPayload_Transaction{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BlockChainPayload_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BlockChainPayload)
	// data
	switch x := m.Data.(type) {
	case *BlockChainPayload_Block:
		s := proto.Size(x.Block)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BlockChainPayload_Transaction:
		s := proto.Size(x.Transaction)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*T2TDatagram)(nil), "TurtleToTurtle.T2TDatagram")
	proto.RegisterType((*T2TCandidateList)(nil), "TurtleToTurtle.T2TCandidateList")
	proto.RegisterType((*T2TCandidateListRequest)(nil), "TurtleToTurtle.T2TCandidateListRequest")
	proto.RegisterType((*T2TCandidate)(nil), "TurtleToTurtle.T2TCandidate")
	proto.RegisterType((*T2TNodeCapability)(nil), "TurtleToTurtle.T2TNodeCapability")
	proto.RegisterType((*BlockChainPayload)(nil), "TurtleToTurtle.BlockChainPayload")
}

func init() {
	proto.RegisterFile("TurtleToTurtle.proto", fileDescriptor_TurtleToTurtle_2f01c49866f50048)
}

var fileDescriptor_TurtleToTurtle_2f01c49866f50048 = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x25, 0x4b, 0xdb, 0x75, 0x37, 0x0b, 0x6a, 0xaf, 0x26, 0x16, 0x4d, 0x3c, 0x74, 0x79, 0x00,
	0x1e, 0xd0, 0x1e, 0x02, 0xe2, 0x01, 0x09, 0xa4, 0xb5, 0x3c, 0x80, 0x84, 0xaa, 0x61, 0xa2, 0xbd,
	0xbb, 0x89, 0xb5, 0x59, 0x0b, 0x71, 0x70, 0xbc, 0xa1, 0xfd, 0x16, 0x7f, 0xc2, 0x87, 0xf0, 0x0f,
	0x38, 0x4e, 0xba, 0x3a, 0x49, 0xcb, 0x9e, 0xe2, 0x7b, 0x7c, 0xce, 0xb1, 0xef, 0xf5, 0x69, 0xe1,
	0x28, 0xbe, 0x95, 0x2a, 0x63, 0xb1, 0xa8, 0xbf, 0x67, 0x85, 0x14, 0x4a, 0xe0, 0xd3, 0x36, 0x7a,
	0x32, 0xa9, 0xbf, 0x0b, 0xc1, 0xf3, 0x9a, 0x11, 0xfe, 0x76, 0xc1, 0x8b, 0xa3, 0xf8, 0x13, 0x55,
	0xf4, 0x4a, 0xd2, 0x1f, 0x18, 0xc2, 0x61, 0x11, 0x15, 0x4b, 0xa6, 0x7e, 0x09, 0x79, 0xf3, 0x25,
	0x0d, 0x9c, 0x99, 0xf3, 0xca, 0x27, 0x2d, 0x0c, 0x03, 0xd8, 0xbf, 0x63, 0xb2, 0xe4, 0x22, 0x0f,
	0xf6, 0xcc, 0xf6, 0xba, 0xc4, 0x67, 0x30, 0x2a, 0x18, 0x93, 0x5a, 0xe7, 0xea, 0x8d, 0x03, 0xd2,
	0x54, 0x78, 0x04, 0x43, 0x7a, 0xc5, 0x72, 0x15, 0x0c, 0x0c, 0x5c, 0x17, 0x38, 0x03, 0x2f, 0x17,
	0x29, 0xbb, 0x6c, 0xbc, 0x86, 0x66, 0xcf, 0x86, 0x70, 0x09, 0x13, 0x15, 0xa9, 0x05, 0xcd, 0x53,
	0x9e, 0x52, 0xc5, 0xbe, 0xf2, 0x52, 0x05, 0x23, 0x4d, 0xf3, 0xa2, 0xd9, 0x59, 0xa7, 0x61, 0xdd,
	0x44, 0x8b, 0xf7, 0xf9, 0x09, 0xe9, 0x69, 0x31, 0x81, 0xe3, 0x2e, 0x46, 0xd8, 0xcf, 0x5b, 0xa6,
	0x6d, 0xf7, 0x8d, 0xed, 0xcb, 0xc7, 0x6c, 0x1b, 0xba, 0x76, 0xdf, 0xe5, 0x84, 0xdf, 0x60, 0xba,
	0xca, 0x44, 0x72, 0xb3, 0xb8, 0xa6, 0x3c, 0xbf, 0xa0, 0xf7, 0x99, 0xa0, 0x69, 0x30, 0x36, 0xf6,
	0xa7, 0x5d, 0xfb, 0x79, 0x97, 0xa8, 0x8d, 0xfb, 0xea, 0xb9, 0x0f, 0x9e, 0x3e, 0x85, 0x36, 0x65,
	0xa8, 0xc7, 0xd2, 0xbd, 0x17, 0xbe, 0x87, 0x83, 0x64, 0x0d, 0xe8, 0x57, 0x73, 0xf5, 0x69, 0xcf,
	0xff, 0xd7, 0x0c, 0xd9, 0xd0, 0xc3, 0x0f, 0x70, 0xbc, 0xa3, 0xcf, 0x2a, 0x0f, 0x9b, 0xeb, 0x98,
	0x3c, 0xb8, 0x55, 0x1e, 0x6c, 0x2c, 0xfc, 0xeb, 0xc0, 0xa1, 0xad, 0xb7, 0x62, 0xe0, 0xb4, 0x62,
	0xb0, 0x3b, 0x38, 0x3a, 0x0a, 0xbc, 0xb8, 0x7c, 0x7b, 0x9e, 0xa6, 0x92, 0x95, 0xa5, 0x49, 0x8f,
	0x4f, 0x6c, 0xa8, 0x61, 0xbc, 0x5b, 0x33, 0xea, 0x20, 0xd9, 0x10, 0x22, 0x0c, 0x0a, 0x21, 0x95,
	0xc9, 0x91, 0x4f, 0xcc, 0x1a, 0x27, 0xe0, 0x2a, 0x95, 0x99, 0xcc, 0xf8, 0xa4, 0x5a, 0xe2, 0x39,
	0x40, 0x42, 0x0b, 0xba, 0xe2, 0x19, 0x57, 0xf7, 0xcd, 0xab, 0x9f, 0x6e, 0x19, 0xd4, 0x52, 0xc7,
	0x70, 0xf1, 0x40, 0x24, 0x96, 0x28, 0xfc, 0x0e, 0xd3, 0x1e, 0x01, 0x4f, 0x60, 0x4c, 0x65, 0x72,
	0xcd, 0xef, 0x68, 0x66, 0xba, 0x1e, 0x93, 0x87, 0xba, 0x37, 0xc4, 0xbd, 0x2d, 0x43, 0xfc, 0xe3,
	0xc0, 0xb4, 0x97, 0x86, 0x2d, 0xe3, 0x77, 0xba, 0x4a, 0xfc, 0x08, 0x43, 0x53, 0x9b, 0x99, 0x7a,
	0xd1, 0x8b, 0x5e, 0x33, 0x9b, 0xdf, 0x7c, 0xbd, 0x34, 0xc7, 0xe8, 0xa0, 0xd5, 0x32, 0xbc, 0x00,
	0x4f, 0x49, 0x9a, 0x97, 0x34, 0x51, 0xd5, 0xcb, 0xb8, 0xc6, 0xe5, 0xf5, 0xa3, 0x2e, 0xf1, 0x46,
	0xa3, 0xbd, 0x6c, 0x8b, 0xf9, 0x08, 0x06, 0x55, 0x5c, 0x57, 0x23, 0xf3, 0x1f, 0xf3, 0xe6, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xf9, 0xcd, 0x9b, 0x9d, 0x04, 0x00, 0x00,
}
