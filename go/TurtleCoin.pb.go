// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: TurtleCoin.proto

package TurtleToTurtle_TurtleCoin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TurtleBlock struct {
	Header               *TurtleBlockHeader     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	BaseTransaction      *TurtleBaseTransaction `protobuf:"bytes,2,opt,name=baseTransaction,proto3" json:"baseTransaction,omitempty"`
	Transactions         []*TurtleTransaction   `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TurtleBlock) Reset()         { *m = TurtleBlock{} }
func (m *TurtleBlock) String() string { return proto.CompactTextString(m) }
func (*TurtleBlock) ProtoMessage()    {}
func (*TurtleBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{0}
}
func (m *TurtleBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleBlock.Unmarshal(m, b)
}
func (m *TurtleBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleBlock.Marshal(b, m, deterministic)
}
func (dst *TurtleBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleBlock.Merge(dst, src)
}
func (m *TurtleBlock) XXX_Size() int {
	return xxx_messageInfo_TurtleBlock.Size(m)
}
func (m *TurtleBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleBlock.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleBlock proto.InternalMessageInfo

func (m *TurtleBlock) GetHeader() *TurtleBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TurtleBlock) GetBaseTransaction() *TurtleBaseTransaction {
	if m != nil {
		return m.BaseTransaction
	}
	return nil
}

func (m *TurtleBlock) GetTransactions() []*TurtleTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type TurtleBlockHeader struct {
	MajorVersion         uint32   `protobuf:"varint,1,opt,name=majorVersion,proto3" json:"majorVersion,omitempty"`
	MinorVersion         uint32   `protobuf:"varint,2,opt,name=minorVersion,proto3" json:"minorVersion,omitempty"`
	Timestamp            uint64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PreviousBlockHash    string   `protobuf:"bytes,4,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
	Nonce                uint32   `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TurtleBlockHeader) Reset()         { *m = TurtleBlockHeader{} }
func (m *TurtleBlockHeader) String() string { return proto.CompactTextString(m) }
func (*TurtleBlockHeader) ProtoMessage()    {}
func (*TurtleBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{1}
}
func (m *TurtleBlockHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleBlockHeader.Unmarshal(m, b)
}
func (m *TurtleBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleBlockHeader.Marshal(b, m, deterministic)
}
func (dst *TurtleBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleBlockHeader.Merge(dst, src)
}
func (m *TurtleBlockHeader) XXX_Size() int {
	return xxx_messageInfo_TurtleBlockHeader.Size(m)
}
func (m *TurtleBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleBlockHeader proto.InternalMessageInfo

func (m *TurtleBlockHeader) GetMajorVersion() uint32 {
	if m != nil {
		return m.MajorVersion
	}
	return 0
}

func (m *TurtleBlockHeader) GetMinorVersion() uint32 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

func (m *TurtleBlockHeader) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TurtleBlockHeader) GetPreviousBlockHash() string {
	if m != nil {
		return m.PreviousBlockHash
	}
	return ""
}

func (m *TurtleBlockHeader) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type TurtleBaseTransaction struct {
	Transaction          *TurtleTransactionPrefix `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TurtleBaseTransaction) Reset()         { *m = TurtleBaseTransaction{} }
func (m *TurtleBaseTransaction) String() string { return proto.CompactTextString(m) }
func (*TurtleBaseTransaction) ProtoMessage()    {}
func (*TurtleBaseTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{2}
}
func (m *TurtleBaseTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleBaseTransaction.Unmarshal(m, b)
}
func (m *TurtleBaseTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleBaseTransaction.Marshal(b, m, deterministic)
}
func (dst *TurtleBaseTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleBaseTransaction.Merge(dst, src)
}
func (m *TurtleBaseTransaction) XXX_Size() int {
	return xxx_messageInfo_TurtleBaseTransaction.Size(m)
}
func (m *TurtleBaseTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleBaseTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleBaseTransaction proto.InternalMessageInfo

func (m *TurtleBaseTransaction) GetTransaction() *TurtleTransactionPrefix {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type TurtleTransaction struct {
	Transaction          *TurtleTransactionPrefix      `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Signature            []*TurtleTransactionSignature `protobuf:"bytes,2,rep,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *TurtleTransaction) Reset()         { *m = TurtleTransaction{} }
func (m *TurtleTransaction) String() string { return proto.CompactTextString(m) }
func (*TurtleTransaction) ProtoMessage()    {}
func (*TurtleTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{3}
}
func (m *TurtleTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleTransaction.Unmarshal(m, b)
}
func (m *TurtleTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleTransaction.Marshal(b, m, deterministic)
}
func (dst *TurtleTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleTransaction.Merge(dst, src)
}
func (m *TurtleTransaction) XXX_Size() int {
	return xxx_messageInfo_TurtleTransaction.Size(m)
}
func (m *TurtleTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleTransaction proto.InternalMessageInfo

func (m *TurtleTransaction) GetTransaction() *TurtleTransactionPrefix {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TurtleTransaction) GetSignature() []*TurtleTransactionSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TurtleTransactionPrefix struct {
	Version              uint32                     `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	UnlockTime           uint64                     `protobuf:"varint,2,opt,name=unlockTime,proto3" json:"unlockTime,omitempty"`
	Inputs               []*TurtleTransactionInput  `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              []*TurtleTransactionOutput `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	PaymentId            string                     `protobuf:"bytes,5,opt,name=paymentId,proto3" json:"paymentId,omitempty"`
	Extra                []uint32                   `protobuf:"varint,6,rep,packed,name=extra,proto3" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TurtleTransactionPrefix) Reset()         { *m = TurtleTransactionPrefix{} }
func (m *TurtleTransactionPrefix) String() string { return proto.CompactTextString(m) }
func (*TurtleTransactionPrefix) ProtoMessage()    {}
func (*TurtleTransactionPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{4}
}
func (m *TurtleTransactionPrefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleTransactionPrefix.Unmarshal(m, b)
}
func (m *TurtleTransactionPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleTransactionPrefix.Marshal(b, m, deterministic)
}
func (dst *TurtleTransactionPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleTransactionPrefix.Merge(dst, src)
}
func (m *TurtleTransactionPrefix) XXX_Size() int {
	return xxx_messageInfo_TurtleTransactionPrefix.Size(m)
}
func (m *TurtleTransactionPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleTransactionPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleTransactionPrefix proto.InternalMessageInfo

func (m *TurtleTransactionPrefix) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TurtleTransactionPrefix) GetUnlockTime() uint64 {
	if m != nil {
		return m.UnlockTime
	}
	return 0
}

func (m *TurtleTransactionPrefix) GetInputs() []*TurtleTransactionInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TurtleTransactionPrefix) GetOutputs() []*TurtleTransactionOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TurtleTransactionPrefix) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

func (m *TurtleTransactionPrefix) GetExtra() []uint32 {
	if m != nil {
		return m.Extra
	}
	return nil
}

type TurtleTransactionSignature struct {
	Signature            string   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TurtleTransactionSignature) Reset()         { *m = TurtleTransactionSignature{} }
func (m *TurtleTransactionSignature) String() string { return proto.CompactTextString(m) }
func (*TurtleTransactionSignature) ProtoMessage()    {}
func (*TurtleTransactionSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{5}
}
func (m *TurtleTransactionSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleTransactionSignature.Unmarshal(m, b)
}
func (m *TurtleTransactionSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleTransactionSignature.Marshal(b, m, deterministic)
}
func (dst *TurtleTransactionSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleTransactionSignature.Merge(dst, src)
}
func (m *TurtleTransactionSignature) XXX_Size() int {
	return xxx_messageInfo_TurtleTransactionSignature.Size(m)
}
func (m *TurtleTransactionSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleTransactionSignature.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleTransactionSignature proto.InternalMessageInfo

func (m *TurtleTransactionSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type TurtleTransactionInput struct {
	// Types that are valid to be assigned to Input:
	//	*TurtleTransactionInput_Gen
	//	*TurtleTransactionInput_Key
	Input                isTurtleTransactionInput_Input `protobuf_oneof:"input"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TurtleTransactionInput) Reset()         { *m = TurtleTransactionInput{} }
func (m *TurtleTransactionInput) String() string { return proto.CompactTextString(m) }
func (*TurtleTransactionInput) ProtoMessage()    {}
func (*TurtleTransactionInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{6}
}
func (m *TurtleTransactionInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleTransactionInput.Unmarshal(m, b)
}
func (m *TurtleTransactionInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleTransactionInput.Marshal(b, m, deterministic)
}
func (dst *TurtleTransactionInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleTransactionInput.Merge(dst, src)
}
func (m *TurtleTransactionInput) XXX_Size() int {
	return xxx_messageInfo_TurtleTransactionInput.Size(m)
}
func (m *TurtleTransactionInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleTransactionInput.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleTransactionInput proto.InternalMessageInfo

type isTurtleTransactionInput_Input interface {
	isTurtleTransactionInput_Input()
}

type TurtleTransactionInput_Gen struct {
	Gen *TurtleTransactionInputGen `protobuf:"bytes,1,opt,name=gen,proto3,oneof"`
}
type TurtleTransactionInput_Key struct {
	Key *TurtleTransactionInputKey `protobuf:"bytes,2,opt,name=key,proto3,oneof"`
}

func (*TurtleTransactionInput_Gen) isTurtleTransactionInput_Input() {}
func (*TurtleTransactionInput_Key) isTurtleTransactionInput_Input() {}

func (m *TurtleTransactionInput) GetInput() isTurtleTransactionInput_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *TurtleTransactionInput) GetGen() *TurtleTransactionInputGen {
	if x, ok := m.GetInput().(*TurtleTransactionInput_Gen); ok {
		return x.Gen
	}
	return nil
}

func (m *TurtleTransactionInput) GetKey() *TurtleTransactionInputKey {
	if x, ok := m.GetInput().(*TurtleTransactionInput_Key); ok {
		return x.Key
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TurtleTransactionInput) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TurtleTransactionInput_OneofMarshaler, _TurtleTransactionInput_OneofUnmarshaler, _TurtleTransactionInput_OneofSizer, []interface{}{
		(*TurtleTransactionInput_Gen)(nil),
		(*TurtleTransactionInput_Key)(nil),
	}
}

func _TurtleTransactionInput_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TurtleTransactionInput)
	// input
	switch x := m.Input.(type) {
	case *TurtleTransactionInput_Gen:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Gen); err != nil {
			return err
		}
	case *TurtleTransactionInput_Key:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Key); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TurtleTransactionInput.Input has unexpected type %T", x)
	}
	return nil
}

func _TurtleTransactionInput_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TurtleTransactionInput)
	switch tag {
	case 1: // input.gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TurtleTransactionInputGen)
		err := b.DecodeMessage(msg)
		m.Input = &TurtleTransactionInput_Gen{msg}
		return true, err
	case 2: // input.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TurtleTransactionInputKey)
		err := b.DecodeMessage(msg)
		m.Input = &TurtleTransactionInput_Key{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TurtleTransactionInput_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TurtleTransactionInput)
	// input
	switch x := m.Input.(type) {
	case *TurtleTransactionInput_Gen:
		s := proto.Size(x.Gen)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TurtleTransactionInput_Key:
		s := proto.Size(x.Key)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TurtleTransactionInputGen struct {
	Type                 int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Height               uint64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TurtleTransactionInputGen) Reset()         { *m = TurtleTransactionInputGen{} }
func (m *TurtleTransactionInputGen) String() string { return proto.CompactTextString(m) }
func (*TurtleTransactionInputGen) ProtoMessage()    {}
func (*TurtleTransactionInputGen) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{7}
}
func (m *TurtleTransactionInputGen) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleTransactionInputGen.Unmarshal(m, b)
}
func (m *TurtleTransactionInputGen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleTransactionInputGen.Marshal(b, m, deterministic)
}
func (dst *TurtleTransactionInputGen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleTransactionInputGen.Merge(dst, src)
}
func (m *TurtleTransactionInputGen) XXX_Size() int {
	return xxx_messageInfo_TurtleTransactionInputGen.Size(m)
}
func (m *TurtleTransactionInputGen) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleTransactionInputGen.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleTransactionInputGen proto.InternalMessageInfo

func (m *TurtleTransactionInputGen) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TurtleTransactionInputGen) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type TurtleTransactionInputKey struct {
	Type                 int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Amount               uint64   `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Offsets              []uint32 `protobuf:"varint,3,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
	KeyImage             string   `protobuf:"bytes,4,opt,name=keyImage,proto3" json:"keyImage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TurtleTransactionInputKey) Reset()         { *m = TurtleTransactionInputKey{} }
func (m *TurtleTransactionInputKey) String() string { return proto.CompactTextString(m) }
func (*TurtleTransactionInputKey) ProtoMessage()    {}
func (*TurtleTransactionInputKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{8}
}
func (m *TurtleTransactionInputKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleTransactionInputKey.Unmarshal(m, b)
}
func (m *TurtleTransactionInputKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleTransactionInputKey.Marshal(b, m, deterministic)
}
func (dst *TurtleTransactionInputKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleTransactionInputKey.Merge(dst, src)
}
func (m *TurtleTransactionInputKey) XXX_Size() int {
	return xxx_messageInfo_TurtleTransactionInputKey.Size(m)
}
func (m *TurtleTransactionInputKey) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleTransactionInputKey.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleTransactionInputKey proto.InternalMessageInfo

func (m *TurtleTransactionInputKey) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TurtleTransactionInputKey) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TurtleTransactionInputKey) GetOffsets() []uint32 {
	if m != nil {
		return m.Offsets
	}
	return nil
}

func (m *TurtleTransactionInputKey) GetKeyImage() string {
	if m != nil {
		return m.KeyImage
	}
	return ""
}

type TurtleTransactionOutputTarget struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TurtleTransactionOutputTarget) Reset()         { *m = TurtleTransactionOutputTarget{} }
func (m *TurtleTransactionOutputTarget) String() string { return proto.CompactTextString(m) }
func (*TurtleTransactionOutputTarget) ProtoMessage()    {}
func (*TurtleTransactionOutputTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{9}
}
func (m *TurtleTransactionOutputTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleTransactionOutputTarget.Unmarshal(m, b)
}
func (m *TurtleTransactionOutputTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleTransactionOutputTarget.Marshal(b, m, deterministic)
}
func (dst *TurtleTransactionOutputTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleTransactionOutputTarget.Merge(dst, src)
}
func (m *TurtleTransactionOutputTarget) XXX_Size() int {
	return xxx_messageInfo_TurtleTransactionOutputTarget.Size(m)
}
func (m *TurtleTransactionOutputTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleTransactionOutputTarget.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleTransactionOutputTarget proto.InternalMessageInfo

func (m *TurtleTransactionOutputTarget) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TurtleTransactionOutputTarget) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type TurtleTransactionOutput struct {
	Amount               uint64                         `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Target               *TurtleTransactionOutputTarget `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TurtleTransactionOutput) Reset()         { *m = TurtleTransactionOutput{} }
func (m *TurtleTransactionOutput) String() string { return proto.CompactTextString(m) }
func (*TurtleTransactionOutput) ProtoMessage()    {}
func (*TurtleTransactionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_TurtleCoin_333fb451eb203e8e, []int{10}
}
func (m *TurtleTransactionOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TurtleTransactionOutput.Unmarshal(m, b)
}
func (m *TurtleTransactionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TurtleTransactionOutput.Marshal(b, m, deterministic)
}
func (dst *TurtleTransactionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TurtleTransactionOutput.Merge(dst, src)
}
func (m *TurtleTransactionOutput) XXX_Size() int {
	return xxx_messageInfo_TurtleTransactionOutput.Size(m)
}
func (m *TurtleTransactionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_TurtleTransactionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_TurtleTransactionOutput proto.InternalMessageInfo

func (m *TurtleTransactionOutput) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TurtleTransactionOutput) GetTarget() *TurtleTransactionOutputTarget {
	if m != nil {
		return m.Target
	}
	return nil
}

func init() {
	proto.RegisterType((*TurtleBlock)(nil), "TurtleToTurtle.TurtleCoin.TurtleBlock")
	proto.RegisterType((*TurtleBlockHeader)(nil), "TurtleToTurtle.TurtleCoin.TurtleBlockHeader")
	proto.RegisterType((*TurtleBaseTransaction)(nil), "TurtleToTurtle.TurtleCoin.TurtleBaseTransaction")
	proto.RegisterType((*TurtleTransaction)(nil), "TurtleToTurtle.TurtleCoin.TurtleTransaction")
	proto.RegisterType((*TurtleTransactionPrefix)(nil), "TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix")
	proto.RegisterType((*TurtleTransactionSignature)(nil), "TurtleToTurtle.TurtleCoin.TurtleTransactionSignature")
	proto.RegisterType((*TurtleTransactionInput)(nil), "TurtleToTurtle.TurtleCoin.TurtleTransactionInput")
	proto.RegisterType((*TurtleTransactionInputGen)(nil), "TurtleToTurtle.TurtleCoin.TurtleTransactionInputGen")
	proto.RegisterType((*TurtleTransactionInputKey)(nil), "TurtleToTurtle.TurtleCoin.TurtleTransactionInputKey")
	proto.RegisterType((*TurtleTransactionOutputTarget)(nil), "TurtleToTurtle.TurtleCoin.TurtleTransactionOutputTarget")
	proto.RegisterType((*TurtleTransactionOutput)(nil), "TurtleToTurtle.TurtleCoin.TurtleTransactionOutput")
}

func init() { proto.RegisterFile("TurtleCoin.proto", fileDescriptor_TurtleCoin_333fb451eb203e8e) }

var fileDescriptor_TurtleCoin_333fb451eb203e8e = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x71, 0x3e, 0xc9, 0xa4, 0x15, 0xed, 0x0a, 0x8a, 0x5b, 0x01, 0xaa, 0xf6, 0xd4, 0x43,
	0x15, 0x41, 0x01, 0x09, 0x71, 0x2c, 0xa0, 0x26, 0x02, 0x89, 0x68, 0x6b, 0x71, 0xe0, 0xb6, 0x4d,
	0x37, 0x89, 0x69, 0xbd, 0x6b, 0xd9, 0xeb, 0xaa, 0x39, 0x70, 0x40, 0xbc, 0x08, 0x2f, 0xc1, 0x11,
	0x9e, 0x8d, 0xfd, 0x4a, 0x6c, 0xd3, 0x58, 0xe0, 0x43, 0x4f, 0xed, 0x4c, 0x76, 0x7e, 0x33, 0xfb,
	0x9f, 0x7f, 0x36, 0xb0, 0x15, 0x64, 0x89, 0xbc, 0x64, 0x6f, 0x44, 0xc8, 0x07, 0x71, 0x22, 0xa4,
	0x40, 0xbb, 0x36, 0x13, 0x08, 0xfb, 0x77, 0x90, 0x1f, 0xc0, 0xdf, 0x1a, 0xd0, 0xb7, 0xe1, 0xf1,
	0xa5, 0x98, 0x5c, 0xa0, 0xb7, 0xd0, 0x99, 0x33, 0x7a, 0xce, 0x12, 0xdf, 0xdb, 0xf7, 0x0e, 0xfa,
	0x47, 0x87, 0x83, 0xca, 0xda, 0x41, 0xa1, 0x6e, 0x68, 0x6a, 0x88, 0xab, 0x45, 0x9f, 0xe1, 0xde,
	0x19, 0x4d, 0x59, 0x90, 0x50, 0x9e, 0xd2, 0x89, 0x0c, 0x05, 0xf7, 0x1b, 0x06, 0xf7, 0xf4, 0xdf,
	0xb8, 0x72, 0x1d, 0xf9, 0x1b, 0x84, 0xc6, 0xb0, 0x21, 0xf3, 0x30, 0xf5, 0x9b, 0xfb, 0xcd, 0xff,
	0x9a, 0xb3, 0x08, 0x2d, 0x11, 0xf0, 0x2f, 0x0f, 0xb6, 0x6f, 0xdc, 0x05, 0x61, 0xd8, 0x88, 0xe8,
	0x17, 0x91, 0x7c, 0x62, 0x49, 0xaa, 0x2f, 0xa0, 0xf5, 0xd8, 0x24, 0xa5, 0x9c, 0x39, 0x13, 0xf2,
	0xfc, 0x4c, 0xc3, 0x9d, 0x29, 0xe4, 0xd0, 0x23, 0xe8, 0xc9, 0x30, 0x62, 0xa9, 0xa4, 0x51, 0xac,
	0x86, 0xf5, 0x0e, 0x5a, 0x24, 0x4f, 0xa0, 0x43, 0xd8, 0x8e, 0x13, 0x76, 0x15, 0x8a, 0x2c, 0xb5,
	0xcd, 0x69, 0x3a, 0xf7, 0x5b, 0xea, 0x54, 0x8f, 0xdc, 0xfc, 0x00, 0xdd, 0x87, 0x36, 0x17, 0x7c,
	0xc2, 0xfc, 0xb6, 0x69, 0x64, 0x03, 0x1c, 0xc1, 0x83, 0xb5, 0xda, 0xa1, 0x00, 0xfa, 0x85, 0x8b,
	0xba, 0x8d, 0x1e, 0xd5, 0x51, 0x6a, 0x9c, 0xb0, 0x69, 0x78, 0x4d, 0x8a, 0x18, 0xfc, 0x7b, 0x25,
	0xd7, 0xad, 0xf7, 0x42, 0xa7, 0xd0, 0x4b, 0xc3, 0x19, 0xa7, 0x32, 0x4b, 0x98, 0x52, 0x57, 0x6f,
	0xfa, 0x65, 0x1d, 0xe6, 0xe9, 0xb2, 0x98, 0xe4, 0x1c, 0xfc, 0xa3, 0x01, 0x0f, 0x2b, 0xba, 0x23,
	0x1f, 0xba, 0x57, 0xa5, 0x85, 0x2f, 0x43, 0xf4, 0x04, 0x20, 0xe3, 0x7a, 0x13, 0x81, 0x5a, 0x9e,
	0xd9, 0x74, 0x8b, 0x14, 0x32, 0x68, 0x04, 0x9d, 0x90, 0xc7, 0x99, 0x5c, 0x3a, 0xf2, 0x59, 0x9d,
	0x39, 0x47, 0xba, 0x92, 0x38, 0x00, 0xfa, 0x00, 0x5d, 0x91, 0x49, 0xc3, 0x6a, 0x19, 0x56, 0x2d,
	0x1d, 0x3f, 0x9a, 0x52, 0xb2, 0x44, 0x68, 0x03, 0xc6, 0x74, 0x11, 0x31, 0x2e, 0x47, 0xe7, 0xc6,
	0x38, 0x3d, 0x92, 0x27, 0xb4, 0xa5, 0xd8, 0xb5, 0x92, 0xdc, 0xef, 0xa8, 0x4e, 0xca, 0x52, 0x26,
	0xc0, 0xaf, 0x61, 0xaf, 0x5a, 0x4b, 0x4d, 0xcc, 0xb7, 0xe2, 0x59, 0x62, 0x2e, 0xef, 0x4f, 0x0f,
	0x76, 0xd6, 0x5f, 0x10, 0x0d, 0xa1, 0x39, 0x63, 0x4b, 0x73, 0xbc, 0xa8, 0x2d, 0xd0, 0x09, 0xe3,
	0xc3, 0x3b, 0x44, 0x23, 0x34, 0xe9, 0x82, 0x2d, 0xdc, 0xab, 0x52, 0x9f, 0xf4, 0x9e, 0x2d, 0x34,
	0x49, 0x21, 0x8e, 0xbb, 0xd0, 0x36, 0xb2, 0xe3, 0x13, 0xd8, 0xad, 0x6c, 0x8b, 0x10, 0xb4, 0xe4,
	0x22, 0xb6, 0xb7, 0x6d, 0x13, 0xf3, 0x3f, 0xda, 0xd1, 0x6f, 0x65, 0x38, 0x9b, 0x4b, 0xe7, 0x06,
	0x17, 0xe1, 0xaf, 0x55, 0x20, 0xd5, 0xb5, 0x0a, 0x44, 0x23, 0x91, 0xf1, 0x15, 0xc8, 0x46, 0xda,
	0x8c, 0x62, 0x3a, 0x4d, 0x99, 0xf3, 0x94, 0x32, 0xa3, 0x0b, 0xd1, 0x1e, 0xdc, 0x55, 0xb3, 0x8f,
	0x22, 0x3a, 0x63, 0xee, 0xb5, 0x58, 0xc5, 0xf8, 0x1d, 0x3c, 0xae, 0xf0, 0x44, 0x40, 0x93, 0x19,
	0x93, 0xa5, 0x11, 0x36, 0xdd, 0x08, 0x5b, 0xb9, 0x9e, 0x3d, 0xa3, 0x0b, 0xfe, 0xee, 0xad, 0xf9,
	0x96, 0x58, 0x4e, 0x61, 0x60, 0xaf, 0x34, 0xf0, 0x18, 0x3a, 0xd2, 0xf4, 0x70, 0x8b, 0x79, 0x55,
	0xdf, 0xb7, 0x76, 0x46, 0xe2, 0x38, 0x67, 0x1d, 0xf3, 0x0b, 0xf6, 0xfc, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x81, 0xc9, 0xc8, 0x0e, 0xd5, 0x06, 0x00, 0x00,
}
