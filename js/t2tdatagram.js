// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.TurtleToTurtle.T2TDatagram');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.TurtleToTurtle.BlockChainPayload');
goog.require('proto.TurtleToTurtle.T2TCandidateList');
goog.require('proto.TurtleToTurtle.T2TCandidateListRequest');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TurtleToTurtle.T2TDatagram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.TurtleToTurtle.T2TDatagram.oneofGroups_);
};
goog.inherits(proto.TurtleToTurtle.T2TDatagram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TurtleToTurtle.T2TDatagram.displayName = 'proto.TurtleToTurtle.T2TDatagram';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.TurtleToTurtle.T2TDatagram.oneofGroups_ = [[6,7,8]];

/**
 * @enum {number}
 */
proto.TurtleToTurtle.T2TDatagram.DatapayloadCase = {
  DATAPAYLOAD_NOT_SET: 0,
  T2TCANDIDATELIST: 6,
  T2TCANDIDATELISTREQUEST: 7,
  BLOCKCHAINPAYLOAD: 8
};

/**
 * @return {proto.TurtleToTurtle.T2TDatagram.DatapayloadCase}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.getDatapayloadCase = function() {
  return /** @type {proto.TurtleToTurtle.T2TDatagram.DatapayloadCase} */(jspb.Message.computeOneofCase(this, proto.TurtleToTurtle.T2TDatagram.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.toObject = function(opt_includeInstance) {
  return proto.TurtleToTurtle.T2TDatagram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TurtleToTurtle.T2TDatagram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TurtleToTurtle.T2TDatagram.toObject = function(includeInstance, msg) {
  var f, obj = {
    p2pnetworkid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    agent: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nodeversion: jspb.Message.getFieldWithDefault(msg, 5, ""),
    t2tcandidatelist: (f = msg.getT2tcandidatelist()) && proto.TurtleToTurtle.T2TCandidateList.toObject(includeInstance, f),
    t2tcandidatelistrequest: (f = msg.getT2tcandidatelistrequest()) && proto.TurtleToTurtle.T2TCandidateListRequest.toObject(includeInstance, f),
    blockchainpayload: (f = msg.getBlockchainpayload()) && proto.TurtleToTurtle.BlockChainPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TurtleToTurtle.T2TDatagram}
 */
proto.TurtleToTurtle.T2TDatagram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TurtleToTurtle.T2TDatagram;
  return proto.TurtleToTurtle.T2TDatagram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TurtleToTurtle.T2TDatagram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TurtleToTurtle.T2TDatagram}
 */
proto.TurtleToTurtle.T2TDatagram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setP2pnetworkid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeversion(value);
      break;
    case 6:
      var value = new proto.TurtleToTurtle.T2TCandidateList;
      reader.readMessage(value,proto.TurtleToTurtle.T2TCandidateList.deserializeBinaryFromReader);
      msg.setT2tcandidatelist(value);
      break;
    case 7:
      var value = new proto.TurtleToTurtle.T2TCandidateListRequest;
      reader.readMessage(value,proto.TurtleToTurtle.T2TCandidateListRequest.deserializeBinaryFromReader);
      msg.setT2tcandidatelistrequest(value);
      break;
    case 8:
      var value = new proto.TurtleToTurtle.BlockChainPayload;
      reader.readMessage(value,proto.TurtleToTurtle.BlockChainPayload.deserializeBinaryFromReader);
      msg.setBlockchainpayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TurtleToTurtle.T2TDatagram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TurtleToTurtle.T2TDatagram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TurtleToTurtle.T2TDatagram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP2pnetworkid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPeerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAgent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNodeversion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getT2tcandidatelist();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.TurtleToTurtle.T2TCandidateList.serializeBinaryToWriter
    );
  }
  f = message.getT2tcandidatelistrequest();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.TurtleToTurtle.T2TCandidateListRequest.serializeBinaryToWriter
    );
  }
  f = message.getBlockchainpayload();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.TurtleToTurtle.BlockChainPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 p2pNetworkId = 1;
 * @return {number}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.getP2pnetworkid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TurtleToTurtle.T2TDatagram.prototype.setP2pnetworkid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 version = 2;
 * @return {number}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TurtleToTurtle.T2TDatagram.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string peerId = 3;
 * @return {string}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TurtleToTurtle.T2TDatagram.prototype.setPeerid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string agent = 4;
 * @return {string}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.getAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TurtleToTurtle.T2TDatagram.prototype.setAgent = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string nodeVersion = 5;
 * @return {string}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.getNodeversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.TurtleToTurtle.T2TDatagram.prototype.setNodeversion = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional T2TCandidateList t2tCandidateList = 6;
 * @return {?proto.TurtleToTurtle.T2TCandidateList}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.getT2tcandidatelist = function() {
  return /** @type{?proto.TurtleToTurtle.T2TCandidateList} */ (
    jspb.Message.getWrapperField(this, proto.TurtleToTurtle.T2TCandidateList, 6));
};


/** @param {?proto.TurtleToTurtle.T2TCandidateList|undefined} value */
proto.TurtleToTurtle.T2TDatagram.prototype.setT2tcandidatelist = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.TurtleToTurtle.T2TDatagram.oneofGroups_[0], value);
};


proto.TurtleToTurtle.T2TDatagram.prototype.clearT2tcandidatelist = function() {
  this.setT2tcandidatelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.hasT2tcandidatelist = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional T2TCandidateListRequest t2tCandidateListRequest = 7;
 * @return {?proto.TurtleToTurtle.T2TCandidateListRequest}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.getT2tcandidatelistrequest = function() {
  return /** @type{?proto.TurtleToTurtle.T2TCandidateListRequest} */ (
    jspb.Message.getWrapperField(this, proto.TurtleToTurtle.T2TCandidateListRequest, 7));
};


/** @param {?proto.TurtleToTurtle.T2TCandidateListRequest|undefined} value */
proto.TurtleToTurtle.T2TDatagram.prototype.setT2tcandidatelistrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.TurtleToTurtle.T2TDatagram.oneofGroups_[0], value);
};


proto.TurtleToTurtle.T2TDatagram.prototype.clearT2tcandidatelistrequest = function() {
  this.setT2tcandidatelistrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.hasT2tcandidatelistrequest = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BlockChainPayload blockChainPayload = 8;
 * @return {?proto.TurtleToTurtle.BlockChainPayload}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.getBlockchainpayload = function() {
  return /** @type{?proto.TurtleToTurtle.BlockChainPayload} */ (
    jspb.Message.getWrapperField(this, proto.TurtleToTurtle.BlockChainPayload, 8));
};


/** @param {?proto.TurtleToTurtle.BlockChainPayload|undefined} value */
proto.TurtleToTurtle.T2TDatagram.prototype.setBlockchainpayload = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.TurtleToTurtle.T2TDatagram.oneofGroups_[0], value);
};


proto.TurtleToTurtle.T2TDatagram.prototype.clearBlockchainpayload = function() {
  this.setBlockchainpayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TurtleToTurtle.T2TDatagram.prototype.hasBlockchainpayload = function() {
  return jspb.Message.getField(this, 8) != null;
};


