// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.TurtleToTurtle.T2TCandidate');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.TurtleToTurtle.T2TNodeCapability');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TurtleToTurtle.T2TCandidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TurtleToTurtle.T2TCandidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TurtleToTurtle.T2TCandidate.displayName = 'proto.TurtleToTurtle.T2TCandidate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.toObject = function(opt_includeInstance) {
  return proto.TurtleToTurtle.T2TCandidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TurtleToTurtle.T2TCandidate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TurtleToTurtle.T2TCandidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ipv4address: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ipv6address: jspb.Message.getFieldWithDefault(msg, 4, ""),
    port: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 6, 0),
    capability: (f = msg.getCapability()) && proto.TurtleToTurtle.T2TNodeCapability.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TurtleToTurtle.T2TCandidate}
 */
proto.TurtleToTurtle.T2TCandidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TurtleToTurtle.T2TCandidate;
  return proto.TurtleToTurtle.T2TCandidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TurtleToTurtle.T2TCandidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TurtleToTurtle.T2TCandidate}
 */
proto.TurtleToTurtle.T2TCandidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIpv4address(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6address(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    case 7:
      var value = new proto.TurtleToTurtle.T2TNodeCapability;
      reader.readMessage(value,proto.TurtleToTurtle.T2TNodeCapability.deserializeBinaryFromReader);
      msg.setCapability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TurtleToTurtle.T2TCandidate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TurtleToTurtle.T2TCandidate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TurtleToTurtle.T2TCandidate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getIpv4address();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getIpv6address();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getCapability();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.TurtleToTurtle.T2TNodeCapability.serializeBinaryToWriter
    );
  }
};


/**
 * optional string peerId = 1;
 * @return {string}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TurtleToTurtle.T2TCandidate.prototype.setPeerid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 version = 2;
 * @return {number}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TurtleToTurtle.T2TCandidate.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 ipV4Address = 3;
 * @return {number}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.getIpv4address = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TurtleToTurtle.T2TCandidate.prototype.setIpv4address = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ipV6Address = 4;
 * @return {string}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.getIpv6address = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TurtleToTurtle.T2TCandidate.prototype.setIpv6address = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 port = 5;
 * @return {number}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TurtleToTurtle.T2TCandidate.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 ttl = 6;
 * @return {number}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.TurtleToTurtle.T2TCandidate.prototype.setTtl = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional T2TNodeCapability capability = 7;
 * @return {?proto.TurtleToTurtle.T2TNodeCapability}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.getCapability = function() {
  return /** @type{?proto.TurtleToTurtle.T2TNodeCapability} */ (
    jspb.Message.getWrapperField(this, proto.TurtleToTurtle.T2TNodeCapability, 7));
};


/** @param {?proto.TurtleToTurtle.T2TNodeCapability|undefined} value */
proto.TurtleToTurtle.T2TCandidate.prototype.setCapability = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.TurtleToTurtle.T2TCandidate.prototype.clearCapability = function() {
  this.setCapability(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TurtleToTurtle.T2TCandidate.prototype.hasCapability = function() {
  return jspb.Message.getField(this, 7) != null;
};


